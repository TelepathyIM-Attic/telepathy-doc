<?xml version='1.0'?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
               "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY mdash "&#8212;">
]>

<chapter id="chapter.filetransfer">
 <title>Transferring Files</title>
 <para>
  File transfer in Telepathy is handled using a
  <interfacename>Channel.Type.FileTransfer</interfacename> channel.
 </para>

 <para>
  The connection manager carries out file transfer via the most appropriate
  mechanism, depending on the protocol. Connection Managers do not know
  about accessing files or URLs, and it is not possible to pass file
  descriptors across D-Bus, so transfer between the client and the
  connection manager is done using a local socket (e.g. a UNIX socket or
  local IPv4 socket).
 </para>

 <para>
  The lifetime of a file transfer channel goes through several states:
  Pending, Accepted, Open and Completed (or Cancelled). This is shown in
  <xref linkend="fig.filetransfer.actors"/>.
 </para>
    
 <figure id="fig.filetransfer.actors">
  <title>Basic Structure of a File Transfer</title>
  <mediaobject><imageobject>
   <imagedata fileref="figures/file-transfer-actors.png"
              format="PNG" />
  </imageobject></mediaobject>
 </figure>

 <sect1 id="sect.filetransfer.sending">
  <title>Sending Files</title>

  <!-- FIXME: something about Capabilities -->

  <sect2 id="sect.filetransfer.sending.channel">
   <title>Creating the New Channel</title>

   <para>
    To set up a file transfer with a remote contact, we need to create a new
    channel of type
    <interfacename>org.freedesktop.Telepathy.Channel.Type.FileTransfer</interfacename>
    using <methodname>CreateChannel</methodname> (see
    <xref linkend="sect.channel.requesting"/>). Besides the standard
    properties <property>ChannelType</property>,
    <property>TargetHandleType</property> and
    <property>TargetHandle</property>/<property>TargetID</property>,
    metadata pertaining to the file transfer must be provided. At least
    <property>Filename</property>, <property>Size</property> and
    <property>ContentType</property> must be provided, but there are other
    properties that may be provided, summarised in
    <xref linkend="table.filetransfer.sending.props"/>.
    <xref linkend="ex.filetransfer.sending.props"/> shows an example map
    of properties that could be used to request this channel.
   </para>
   
   <table id="table.filetransfer.sending.props">
    <tgroup cols="4">
     <thead>
      <row>
       <entry>Property</entry>
       <entry>Type</entry>
       <entry>Description</entry>
       <entry>Notes</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>Filename</entry>
       <entry>String</entry>
       <entry>
        The name of the file on the sender's side, the suggested
        filename for the receiver.
       </entry>
       <entry>Required</entry>
      </row>

      <row>
       <entry>ContentType</entry>
       <entry>String</entry>
       <entry>
        The MIME type of the file.
       </entry>
       <entry>Required</entry>
      </row>

      <row>
       <entry>Size</entry>
       <entry>uint64</entry>
       <entry>
        The size of the file in bytes.
       </entry>
       <entry>
        Required. Although it must be set accurately, receivers should not
	trust this value.
       </entry>
      </row>

      <row>
       <entry>ContentHashType</entry>
       <entry><type>File_Hash_Type</type></entry>
       <entry>
        Specifies the hashing function used for the
	<property>ContentHash</property> property.
       </entry>
       <entry></entry>
      </row>

      <row>
       <entry>ContentHash</entry>
       <entry>String</entry>
       <entry>
        Hash of the file transfer contents.
       </entry>
       <entry>
        <property>ContentHashType</property> must be set to the appropriate
	hashing algorithm.
       </entry>
      </row>

      <row>
       <entry>Description</entry>
       <entry>String</entry>
       <entry>
        A string description of the file transfer.
       </entry>
       <entry></entry>
      </row>

      <row>
       <entry>Date</entry>
       <entry>int64 (<type>Unix_Timestamp64</type>)</entry>
       <entry>
        The last modification time (mtime) of the file.
       </entry>
       <entry></entry>
      </row>

     </tbody>
    </tgroup>
   </table>

   <example id="ex.filetransfer.sending.props">
    <title>Example Properties for Creating a File Transfer Channel</title>
    <informaltable>
     <tgroup cols="2">
      <tbody>
       <row>
        <entry>org.freedesktop.Telepathy.Channel.ChannelType</entry>
	<entry>org.freedesktop.Telepathy.Channel.Type.FileTransfer</entry>
       </row>
       <row>
        <entry>org.freedesktop.Telepathy.Channel.TargetHandleType</entry>
	<entry>Handle_Type_Contact</entry>
       </row>
       <row>
        <entry>org.freedesktop.Telepathy.Channel.TargetID</entry>
	<entry>"bob@example.com"</entry>
       </row>
       <row>
        <entry>org.freedesktop.Telepathy.Channel.Type.FileTransfer.Filename</entry>
	<entry>"cat.jpg"</entry>
       </row>
       <row>
        <entry>org.freedesktop.Telepathy.Channel.Type.FileTransfer.Size</entry>
	<entry>32768</entry>
       </row>
       <row>
        <entry>org.freedesktop.Telepathy.Channel.Type.FileTransfer.ContentType</entry>
	<entry>image/jpeg</entry>
       </row>
      </tbody>
     </tgroup>
    </informaltable>
   </example>

   <tip>
    <title>Using GLib's GFileInfo</title>
    <para>
     If using <application>telepathy-glib</application>, all of the required
     information to create this channel can be determined using
     <function>g_file_query_info</function>.
    </para>

    <example id="ex.filetransfer.sending.gfileinfo"
             file="glib_salut_ft/sender.c">
     <title>g_file_query_info()</title>
    </example>
   </tip>

   <para>
    The remote user is prompted whether they wish to accept your transfer
    when the channel is created (not when you call
    <methodname>ProvideFile</methodname>. You should connect the signal
    <methodname>FileTransferStateChanged</methodname> as soon as the channel
    is available to listen for status changes. If the channel's state
    switches to <emphasis>Cancelled</emphasis>
    (<type>File_Transfer_State_Cancelled</type>), that means the user
    declined to accept the file. If this happens you should close the
    channel.
   </para>
  </sect2>

  <sect2 id="table.filetransfer.sending.providing">
   <title>Providing the File</title>

   <para>
    Once the channel has been set up and is ready, you should connect to the
    <methodname>InitialOffsetDefined</methodname> signal. This will be
    emitted before the channel enters the <emphasis>Open</emphasis> state
    (<type>File_Transfer_State_Open</type>), and represents the file offset
    that the receiver wants you to continue from. This value should be
    stored for when we start transferring the file.
   </para>
   
   <para>
    <methodname>ProvideFile</methodname> takes as its arguments the type of
    socket we wish to use to transfer the file from the Connection Manager
    to the client. Different Connection Managers and different OS platforms
    might support different socket options. The property
    <property>AvailableSocketTypes</property> lists the supported socket
    types and their access modes. This property would have been passed in
    as one of the channel properties returned when the channel was created.
   </para>
   
   <note>
    <para>
     The socket address returned by <methodname>AcceptFile</methodname> and
     <methodname>ProvideFile</methodname> is a socket shared between the
     client and the Connection Manager. It is not the address of the socket
     between you and the remote client.
    </para>
    <para>
     The file itself is transferred by the Connection Manager using the most
     appropriate mechanism to reach the remote host, be it a peer-to-peer
     socket, SOCKS5 proxy, using ICE or in-band via the server. A Telepathy
     client doesn't have to be concerned with the mechanism.
    </para>
   </note>

   <para>
    The transfer begins once both the sender and the receiver have called
    <methodname>ProvideFile</methodname> and
    <methodname>AcceptFile</methodname> respectively and the channel enters
    the <emphasis>Open</emphasis> state
    (<type>File_Transfer_State_Open</type>).
   </para>
  </sect2>

  <sect2 id="sect.filetransfer.sending.open">
   <title>Transferring the File</title>

   <para>
    When <methodname>FileTransferStateChanged</methodname> reports the state
    of <emphasis>Open</emphasis> (<type>File_Transfer_State_Open</type>),
    you should connect to the socket address returned by
    <methodname>ProvideFile</methodname>. You should also open the source
    file and seek to the offset provided by
    <methodname>InitialOffsetDefined</methodname>.
   </para>

   <para>
    Copy the file from the source file to the socket. Files can be large, so
    you should do this in a way that doesn't block your mainloop. When you
    reach the end of the file, close the socket to the Connection Manager.
    This will indicate that you have completed the transfer.
   </para>
  </sect2>
 </sect1>

 <sect1 id="sect.filetransfer.receiving">
  <title>Receiving Files</title>

  <!-- FIXME: something about Capabilities -->

  <sect2 id="sect.filetransfer.receiving.channel">
   <title>Handling The New Channel</title>

   <para>
    An incoming file transfer channel will be heralded by the
    <methodname>NewChannels</methodname> signal (as with other incoming
    channels, e.g. <link linkend="sect.messaging.messages.receiving">text
    channels</link>). The channel type of the new channel will be
    <interfacename>org.freedesktop.Telepathy.Channel.Type.FileTransfer</interfacename>.
   </para>

   <para>
    As well as common channel properties (e.g.
    <property>InitiatorHandle</property>, <property>InitiatorID</property>,
    <property>TargetHandle</property>, <property>TargetID</property>, etc.),
    there will be properties specific to file transfers that contain the
    metadata for the file, summarised in
    <xref linkend="table.filetransfer.sending.props"/>. The client should
    display this information to the user when asking whether or not to
    accept the file.
   </para>

   <para>
    If the user declines to receive the file, simply closing the channel
    will cancel the transfer.
   </para>

  </sect2>

  <sect2 id="table.filetransfer.receiving.accepting">
   <title>Accepting The File</title>

   <para>
    Before calling <methodname>AcceptFile</methodname>, the client should
    first connect the <methodname>FileTransferStateChanged</methodname>
    signal.
   </para>

   <para>
    <methodname>AcceptFile</methodname> takes as its arguments the type of
    socket we wish to use to transfer the file from the Connection Manager
    to the client. Different Connection Managers and different OS platforms
    might support different socket options. The property
    <property>AvailableSocketTypes</property> lists the supported socket
    types and their access modes. This property would have been passed in
    as one of the channel properties to
    <methodname>NewChannels</methodname>.
   </para>

   <para>
    <methodname>AcceptFile</methodname> also takes a requested initial
    file offset (for continuations, if a partial transfer was deemed to
    occur) &mdash; or use <literal>0</literal> for the whole file. Note that
    this is a <emphasis>requested</emphasis> offset, and depending on the
    protocol and sending client, may not be honoured. Clients must check
    <property>InitialOffset</property> property once the channel is open.
   </para>

   <para>
    Calling <methodname>AcceptFile</methodname> will return the address of
    a socket opened by the Connection Manager and put the channel into the
    <emphasis>Accepted</emphasis> state
    (<type>File_Transfer_State_Accepted</type>). However, you should not
    attempt to open the socket yourself until the channel enters the
    <emphasis>Open</emphasis> state (<type>File_Transfer_State_Open</type>).
   </para>

   <note>
    <para>
     The socket address returned by <methodname>AcceptFile</methodname> and
     <methodname>ProvideFile</methodname> is a socket shared between the
     client and the Connection Manager. It is not the address of the socket
     between you and the remote client.
    </para>
    <para>
     The file itself is transferred by the Connection Manager using the most
     appropriate mechanism to reach the remote host, be it a peer-to-peer
     socket, SOCKS5 proxy, using ICE or in-band via the server. A Telepathy
     client doesn't have to be concerned with the mechanism.
    </para>
   </note>
  </sect2>

  <sect2 id="table.filetransfer.receiving.open">
   <title>Transferring the File</title>

   <para>
    When <methodname>FileTransferStateChanged</methodname> reports the state
    of <emphasis>Open</emphasis> (<type>File_Transfer_State_Open</type>),
    you should connect to the socket returned by
    <methodname>AcceptFile</methodname>.
   </para>

   <para>
    You must check the value of the property
    <property>InitialOffset</property> to determine what offset to seek to
    in the target file. You <emphasis>cannot</emphasis> assume that the
    requested offset will be honoured.
   </para>

   <para>
    Transferring the file may take some time, so you should not
    spin in a read loop from the Connection Manager's socket. Instead
    register the socket's file descriptor with your mainloop implementation
    to copy data into the target when it arrives.
   </para>

   <tip>
    <title>Sockets, File Descriptors and Mainloops</title>
    <para>
     Most mainloop implementations provide a way to register your own file
     descriptors into the mainloop's <function>select()</function> call.
     This allows your program to reenter the mainloop and receive a callback
     when there is new data to be read from the socket.
    </para>
    <para>
     With <application>GLib</application>, you can use
     <classname>GIOChannel</classname>
     (<function>g_io_channel_unix_new</function>).
    </para>
   </tip>

   <para>
    The end of the file transfer will be indicated by the
    <methodname>FileTransferStateChanged</methodname> signal reporting the
    state <emphasis>Completed</emphasis>
    (<type>File_Transfer_State_Completed</type>). When this state is
    reached, the socket, channel and destination file can all be closed.
    Equally the <emphasis>Cancelled</emphasis> state
    (<type>File_Transfer_State_Cancelled</type>) state will be emitted when
    the remote end cancels the transfer.
   </para>
  </sect2>

 </sect1>
</chapter>
