<?xml version='1.0'?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
               "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [

  <!-- These entities are used in the generated .omf files, 
       along with the author tags,
       allowing the Yelp help browser to know about the document.
 
       The legal.xml file contains legal information, there is no need to edit the file. 
       Use the appversion entity to specify the version of the application.
       Use the manrevision entity to specify the revision number of this manual.
       Use the date entity to specify the release date of this manual.
       Use the app entity to specify the name of the application. -->
  <!ENTITY legal SYSTEM "legal.xml">
  <!ENTITY appversion "0.7">
  <!ENTITY manrevision "0.2">
  <!ENTITY date "12 August 2008">
  <!ENTITY app_no_markup "Telepathy">
  <!ENTITY app "<application>&app_no_markup;</application>">
  <!ENTITY url_examples_base "./examples/">
  <!ENTITY url_spec "http://telepathy.freedesktop.org/spec.html">
  <!ENTITY url_spec_base "&url_spec;#org.freedesktop.Telepathy.">
  <!ENTITY url_telepathy_glib_base "http://telepathy.freedesktop.org/doc/telepathy-glib/telepathy-glib-">
  <!ENTITY url_dbus_spec_base "http://dbus.freedesktop.org/doc/dbus-specification.html#">
]>

<book id="index">
  <bookinfo>
    <title>&app; manual</title>

    <!-- If we were using the FDL license then we would need full revision 
         tags instead of just this one date.
         Actually, it seems that DocBook allows just a single date tag without 
         these revhistory tags, but maybe gnome-doc-utils cannot cope with 
         that. -->
    <revhistory>
      <revision> 
        <revnumber>&app_no_markup; &appversion;</revnumber> 
          <date>&date;</date> 
          <revdescription> 
            <para role="author">Murray Cumming</para> 
            <para role="publisher">&app;</para> 
	  </revdescription> 
      </revision>
    </revhistory> 

    <authorgroup>
      <author role="maintainer"> 
        <firstname>Murray</firstname> 
        <surname>Cumming</surname> 
        <affiliation> 
          <orgname>&app_no_markup; Documentation Team</orgname> 
          <address> <email>murrayc@openismus.com</email> </address> 
        </affiliation> 
      </author> 
    </authorgroup>
      

    <copyright>
      <year>2008</year>
      <holder>Collabora Ltd</holder>
    </copyright>

    <abstract role="description">
      <para>Software development manual for &app;.</para>
    </abstract>


  <xi:include href="legal.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>

  </bookinfo>
      
<chapter id="chapter-introduction">
  <title>Introduction</title>
  <para>The Telepathy framework allows applications to use real-time communications via several common protocols, such as XMPP (Jabber). For instance, an instant messenger application might use Telepathy to allow chats with online contacts via accounts with various IM services. Or a  game might use Telepathy to simplify the implementation of its networking code, allowing users to play against each other.</para>
  <para>Telepathy is a <ulink url="http://www.freedesktop.org/wiki/Software/dbus">D-Bus</ulink> API so it may be used from most programming languages.</para>
  <para>All this functionality is available under an open source license, allowing people to make improvements and add new features.</para>

  <para>TODO:  What are the benefits? How is it better than the alternatives? (If there are any). Is it easier, robuster, more secure, more flexible, cheaper, free-er, what?</para>
</chapter>

<chapter id="chapter-installation">
  <title>Installation</title>
  <para>If you are using a common Linux distribution you may already have the Telepathy packages installed. For instance, it is a dependency of the <application>Empathy</application> instant messenging client. However, you will probably still need some extra packages to build the examples in this book.</para>
  
  <sect1>
    <title>Installation on Ubuntu Linux</title>
    <para>You can install the Telepathy packages from the command line <application>Terminal</application> with this command: <command>sudo apt-get install telepathy-devel libtelepathy-glib-dev</command></para>
  </sect1>

  <sect1>
    <title>Installation on Fedora Linux</title>
     <!-- TODO: Is there no general telepathy-devel package? -->
     <para>You can install the Telepathy packages from the command line <application>Terminal</application> with this command, as root: <command>yum install telepathy-glib-devel telepathy-gabble telepathty-butterfly telepathy-haze telepathy-salut telepathy-stream-engine</command></para>
  </sect1>

</chapter>

<!--
Notes:
- The following sections describe important D-Bus API in telepathy.
These sections will describe how these interfaces can be used, including small 
code snippets.
- Where possible the documentation will pull in small but complete 
code examples which can build as part of the documentation, guaranteeing that 
they at least compile with the latest API, and making it easier to test that 
they really work.
- Wherever interfaces are mentioned, there will be a links to online API 
reference documentation (assuming that it exists) and links to relevant parts 
of the Telapathy specification. 
-->

<chapter id="chapter-basics">
  <title>Basics</title>

  <para>This chapter introduces some basic techniques and concepts that you must understand to use Telepathy confidently. You should read through this chapter before proceeding, but you will probably want to refer back here again later.</para>

  <sect1 id="sec-basics-dbus">
    <title>Using D-Bus</title>
    <para>Telepathy is a <indexterm><primary>D-Bus</primary></indexterm>D-Bus API. Telepathy components conform to the <ulink url="&url_spec;">Telepathy D-Bus Specification</ulink>, which is therefore also the main Telepathy API reference.</para>
    <para>D-Bus is an <indexterm><primary>IPC</primary></indexterm>IPC (Inter-process communication) system, allowing different software components to be implemented in different processes, with different programming languages. It also allows multiple applications to easily share functionality from a single process. Most examples in this book will use <link linkend="sec-basics-language-bindings">language bindings</link> instead of using D-Bus directly. However, an understanding of the following D-Bus concepts will help you even when using language bindings.</para>
 
     <variablelist>

       <varlistentry>
         <term>
           <indexterm><primary>Bus Name</primary></indexterm>
           Bus Name
         </term>
         <listitem>
           <para>A process can make a service available by connecting to a D-Bus <literal>bus</literal> and requesting a &quot;well-known&quot; <literal>bus name</literal> for the connection, such as &quot;com.mycompany.TextEditor&quot;, by which other processes, such as applications, can access it.</para>
         </listitem>
       </varlistentry>

       <varlistentry>
         <term>
           <indexterm><primary>Object Path</primary></indexterm>
           Object Path
         </term>
         <listitem>
           <para>The service process provides D-Bus objects on that bus name. Each object has an <literal>object path</literal>, such as &quot;/com/company/TextEditor&quot;, which a client application must specify to use that object.</para>
         </listitem>
       </varlistentry>

       <varlistentry>
         <term>
           <indexterm><primary>Interface Name</primary></indexterm>
           Interface Name
         </term>
         <listitem>
           <para>Each D-Bus object implements one or more D-Bus interface. Each interface has an <literal>interface name</literal>, such as &quot;com.mycompany.TextEditor&quot;. Each interface provides one or more method or signal, each with a member name.</para>
         </listitem>
       </varlistentry>

    </variablelist>

    <para>Of course, for simple services with just one object that provides just one interface, these three names will often look very similar.</para>

    <para>In the following sections you will see how a D-Bus API can be used from some common programming languages. Remember that these examples only create <literal>proxies</literal> to the D-Bus objects, providing a way to use their API. The actual objects are instantiated in the service's process.</para>

    <para>In these examples, we use the FreeDesktop <literal>Notification</literal> system, which should be available on most modern Linux installations. The examples should cause a message to popup from your desktop panel. Note that, like Telepathy, this service is available on the <indexterm><primary>Session Bus</primary></indexterm><literal>Session Bus</literal> rather than the <indexterm><primary>System Bus</primary></indexterm><literal>System Bus</literal>. Services on the <literal>Session Bus</literal> are for the current user's session only. Services on the <literal>System Bus</literal> are shared between all users.</para>

    <para>These programming languages allow you to call D-Bus methods synchronously, meaning that they block until they can return the method's result. However, that is generally disapproved of because the D-Bus service may take a long time to reply, and because of some fundamental technical problems with the use of blocking calls between processes. Therefore, the examples call the D-Bus method asynchronously, theoretically allowing the application to continue with other tasks while waiting for the result.</para> 
    <!-- TODO: Get the result asynchronously. --> 

    <sect2 id="sec-basics-dbus-glib">
      <title>Using D-Bus from C, with glib</title>

      <para>This example uses dbus-glib's <ulink url="http://dbus.freedesktop.org/doc/api/html/group__DBusGLib.html#gbd4dab5f4d66ab052c15862028502caf">dbus_g_proxy_begin_call()</ulink> function to call the <literal>Notify()</literal> method on the <literal>org.freedesktop.Notification</literal> interface of the desktop notification service at the <literal>/org/freedesktop/Notification</literal> path. Note that we must specify the types of each parameter.</para>
      <para>We could have used the synchronous <ulink url="http://dbus.freedesktop.org/doc/api/html/group__DBusGLib.html#ge38c0fb788e874fcf88489c961480f38">dbus_g_proxy_call()</ulink> function instead but, as already mentioned, asynchronous calls are generally preferred with D-Bus.</para>
      <para><ulink url="&url_examples_base;basics_dbus_glib">Source Code</ulink></para>

    </sect2>

    <sect2 id="sec-basics-dbus-python">
      <title>Using D-Bus from Python</title>

      <para>This example uses <indexterm><primary>Python</primary></indexterm>Python to call the <literal>Notify()</literal> method on the <literal>org.freedesktop.Notification</literal> interface of the desktop notification service at the <literal>/org/freedesktop/Notification</literal> path.</para>
      <para>Note that we specify reply and error handlers as keyword arguments, to call the method asynchronously because asynchronous calls are generally preferred with D-Bus.</para>
      <para><ulink url="&url_examples_base;basics_dbus_python">Source Code</ulink></para>

    </sect2>
   </sect1>

   <sect1 id="sec-basics-language-bindings">
    <title>Language Bindings</title>
    <para>As mentioned in the <link linkend="sec-basics-dbus">Using D-Bus</link> section, many programming languages have their own generic ways of using D-Bus APIs. In addition, there are some Telepathy-specific APIs to make the use of Telepathy even easier. For instance, <ulink url="http://telepathy.freedesktop.org/wiki/Telepathy%20GLib">telepathy-glib</ulink> provides an API that is familiar to users of Glib and GTK+, using the GObject system and related conventions.</para>
    <para>Likewise, the <ulink url="http://telepathy.freedesktop.org/wiki/TelepathyQt">Telepathy-Qt</ulink> project provides a more Qt-like API for Telepathy and <ulink url="http://telepathy.freedesktop.org/wiki/Telepathy%20Python">Telepathy-Python</ulink> does the same for Python.</para> <!-- TODO: Link to Telepathy-Qt4 when it is ready. -->

    <para>Remember that, like raw use of D-Bus from the programming languages, these Telepathy language bindings only create <literal>proxies</literal> to the D-Bus objects, providing a way to use their API. The actual objects are instantiated in the service's process.</para>
  
    <sect2 id="sec-basics-language-bindings-telepathy-glib">
      <title>telepathy-glib</title>
      <para>The C examples in this book will use telepathy-glib, which provides a GObject-based API for the Telepathy framework.</para>

      <!-- TODO: Mention this? 
      <para>The reference documentation only makes sense in terms of the Telepathy D-Bus Specification.</para>
      -->

      <sect3 id="sec-basics-language-bindings-telepathy-glib-async">
        <title>Asynchronous Calls</title>
        <para>For each Telepathy D-Bus method, telepathy-glib generally provides both a &quot;run&quot; and a &quot;call&quot; function. For instance, <ulink url="&url_telepathy_glib_base;connection.html#tp-cli-connection-run-connect">tp_cli_connection_run_connect()</ulink> and <ulink url="&url_telepathy_glib_base;connection.html#tp-cli-connection-call-connect">tp_cli_connection_call_connect()</ulink>. The &quot;run&quot; function is synchronous, blocking until the D-Bus service has returned the value, whereas the &quot;call&quot; function is asynchronous, immediately returning and later providing the result to a callback function.</para>
        <para>However, the Telepathy developers strongly discourage the use of the &quot;run&quot; functions, so all examples in this book will use the asynchronous &quot;call&quot; functions. This complicates application code but it is more robust and allows the application to be more responsive, doing more than one thing at a time.</para>
      </sect3>

      <sect3 id="sec-basics-language-bindings-telepathy-glib-generated">
        <title>Generated Functions</title>
        <para>telepathy-glib provides both hand-coded and generated API. The generated functions have these prefixes:</para>

        <variablelist>

          <varlistentry>
            <term>tp_cli_</term> 
            <listitem>
              <para>These functions are useful for client applications. For instance, <ulink url="&url_telepathy_glib_base;connection.html#tp-cli-connection-run-connect">tp_cli_connection_run_connect()</ulink>.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>tp_svc_</term> 
            <listitem>
              <para>These functions are useful for service implementations, such as connection managers. For instance, <ulink url="&url_telepathy_glib_base;svc-connection.html#tp-svc-connection-implement-connect">tp_svc_connection_implement_connect()</ulink>.</para>
            </listitem>
          </varlistentry>

        </variablelist>

        <para>The generated functions make simple direct calls to the D-Bus methods, without any additional logic and without using more appropriate types. For instance, they use unsigned integers for parameters because D-Bus does not have a concept of enumerations. However, the Telepathy D-Bus Specification does describe enumerations of possible values for these parameters, so the hand-written functions do use enums. Likewise, raw D-Bus methods can only identify object instances in terms of a <literal>bus name</literal> and <literal>object path</literal> combination, but telepathy-glib can directly provide a GObject instance that is a proxy for a D-Bus object without exposing those intermediate details.</para>
        <para>Hand-coded functions have a simple <literal>tp_</literal> prefix and should be preferred whenever they exist. The generated functions exist only because hand-written functions have not yet been implemented for all Telepathy D-Bus methods.</para>  
        <para>In addition to more pleasant syntax, some hand-written objects contain a large amount of useful logic which can simplify application code. For instance, <ulink url="&url_telepathy_glib_base;contact.html">TpContact</ulink> uses GObject signals.</para>
      </sect3>

      <sect3>
        <title>Instantiation and Readiness</title>
        <!-- TODO: Keep any eye on http://bugs.freedesktop.org/show_bug.cgi?id=13422 -->
        <para>Some of the hand-coded objects, such as <ulink url="&url_telepathy_glib_base;connection.html">TpConnection</ulink> and <ulink url="&url_telepathy_glib_base;connection.html">TpChannel</ulink>, call additional D-Bus methods to acquire necessary information. When they have received this information they are then &quot;ready&quot;, meaning that other hand-written functions can then be called. This concept of &quot;readiness&quot; does not exist in the raw D-Bus API because it describes the status of the hand-written behaviour. For instance, you should call <ulink url="&url_telepathy_glib_base;connection.html#tp-connection-call-when-ready">tp_connection_call_when_ready()</ulink> after instantiating a TpConnection, or <ulink url="&url_telepathy_glib_base;channel.html#tp-channel-call-when-ready">tp_channel_call_when_ready()</ulink> after instantiating a TpChannel.</para>

      </sect3>

      <sect3>
        <title>Headers and Linking</title>
        <para>To use the telepathy-glib API, you must include the headers for the library, and link to its shared library. The necessary compiler and linker commands can be obtained from the <literal>pkg-config</literal> utiltity like so:</para>
        <para>
<programlisting>
pkg-config telepathy-glib --cflags
pkg-config telepathy-glib --libs
</programlisting>
        </para>
        <para>However, if you are using the &quot;autotools&quot; (automake, autoconf, etc) build system, you will find it more convenient to use the <function>PKG_CHECK_MODULES</function> macro in your <literal>configure.ac</literal> file.
       </para>
       <para>
<programlisting>
PKG_CHECK_MODULES(EXAMPLE, telepathy-glib)
AC_SUBST(EXAMPLE_CFLAGS)
AC_SUBST(EXAMPLE_LIBS)
</programlisting>
        </para>
        <para>You should then use the generated _CFLAGS and _LIBS definitions in your Makefile.am files.</para>
      </sect3>

    </sect2>

  </sect1>

  <sect1 id="sec-basics-connection-managers">
    <title>Connection Managers</title>
    <para>Support for the various communication protocols is provided by several <literal>Connection Managers</literal>. For instance, the <literal>telepathy-gabble</literal> Connection Manager provides support for the <acronym>XMPP</acronym> protocol, also known as <literal>Jabber</literal>.</para>
    <para>There is no central &app; D-Bus service. Instead there are several connection manager services, activated on demand, and each of these connection managers provide the same core set of D-Bus interfaces, such as <ulink url="&url_spec_base;Connection">Connection</ulink> and <ulink url="&url_spec_base;Channel">Channel</ulink>, allowing application code to be written generically for all connection managers.</para>
  </sect1>

  <!-- TODO: Notes: The interfaces are often called their type, particularly for channels. Explain. -->
  <!-- TODO: Is it only Connection that has optional interfaces? -->
  <sect1 id="sec-basics-optional-interfaces">
    <title>Optional Interfaces</title>
    <para>Although a core set of D-Bus interfaces is provided by all connection managers, some extra D-Bus interfaces are optional. For instance, some connection managers only provide extra interfaces when it discovers that the remote server provides that optional functionality. Therefore, when using these interfaces, application code should first check that the interface is available, sometimes falling back to alternative interfaces. Use the Connection interface's <ulink url="&url_spec_base;Connection.GetInterfaces"><function>GetInterfaces()</function></ulink> method for this.</para>

    <note>
    <para>Note that the <ulink url="&url_spec_base;Connection.GetInterfaces"><function>Connection.GetInterfaces()</function></ulink> method  does more than the standard D-Bus <ulink url="&url_dbus_spec_base;standard-interfaces-introspectable"><function>Introspectable.Introspect()</function></ulink> method. <function>GetInterfaces()</function> allows tools and language bindings to know about the possible availability of interfaces via <function>Introspect()</function> while providing an additional check that the interface is really supported for the particular connection manager with the particular remote server to which that connection manager is connected. 
    </para>
    </note>
  </sect1>

  <sect1 id="sec-basics-mission-control">
    <title>Mission Control</title>
    <para>TODO: Notes: desktop-wide accounts and dispatching to applications. TODO: Should we even mention this before the new (5?) version is ready?
    </para>
  </sect1>

  <sect1 id="sec-basics-handles">
    <title>Handles</title>
    <para>The Telepathy D-Bus API does not have D-Bus objects to represent contacts, groups, or rooms. These are instead identified by numeric <literal>handles</literal>. This is for performance reasons, and because it is easier to compare numeric handles than to discover if two D-Bus proxy objects refer to the same object instance.</para>
    <para>These numeric handles are only unique within a Telepathy Connection. For instance, don't try to use a Connection's contact handle with a different Connection. The handles also only make sense when combined with a <ulink url="&url_spec;#type-Handle_Type">handle type</ulink>, telling the API whether it represents a contact, group, or list.</para>

    <sect2>
      <title>Hold and Release</title>
      <para>When a Telepathy object has finished with a handle, that number may be forgotten and even reused later as a handle for a completely different item. However, your application may wish to &quot;hold&quot; the handle for a longer time. To do so, you should call the Connection's <ulink url="&url_spec_base;Connection.HoldHandles"><function>HoldHandles()</function></ulink> method and call <ulink url="&url_spec_base;Connection.ReleaseHandles"><function>ReleaseHandles()</function></ulink> when you have finished with the handle. However, a single <function>ReleaseHandles()</function> call will release a handle regardless of how many times <function>HoldHandles()</function> has been called, so be careful not to call it while other code may be using the handle.</para>

      <para>This is less necessary when using Telepathy <link linkend="sec-basics-language-bindings">language bindings</link>, such as telepathy-glib, because they may automatically hold and release handles for the lifetime of their objects, such as telepathy-glib's TpContact. Additionaly, telepathy-glib wraps the hold methods with the <ulink url="&url_telepathy_glib_base;connection.html#tp-connection-hold-handles"><function>tp_connection_hold_handles()</function></ulink> and <ulink url="&url_telepathy_glib_base;connection.html#tp-connection-unref-handles"><function>tp_connection_unref_handles()</function></ulink> functions which reference-count the client-side handle &quot;hold&quot;, allowing you to match each <function>tp_connection_hold_handles()</function> call with a call to <function>tp_connection_release_handles()</function>.</para>

      <para>In the later sections we will mention when it actually makes sense to do this when using specific parts of the Telapathy API.</para>
    </sect2>

  </sect1>

  <sect1 id="sec-basics-api-conventions">
    <title>API conventions</title>
    <para>TODO: Notes: For instance"Request*" vs. "Get*" - see Asynchronous Calls.
    </para>
  </sect1>

  <sect1 id="sec-basics-asynchronous-calls">
    <title>Asynchronous Calls</title>
    <para>TODO: 
    Notes: Most functions are synchronous, getting locally-stored data.
    - Convention is that Get* methods access local information, but Request* 
      methods may access the network.
      (This convention seems to apply to the D-Bus API, but not to the telepathy-glib API. murrayc)
    - Many Get* methods are being deprecated in favour of D-Bus properties 
      currently (because you can do GetAll() for a given interface and download 
      the state at once with fewer roundtrips).
    </para>
  </sect1>
</chapter>

<chapter id="chapter-accounts">
  <title>Accounts and AccountManager</title>
  <para>TODO:
   Notes:
   - This is described in the telepathy specification but only partially 
     implemented in Nokia mission control.
   - AccountManager contains a list of my accounts (my jabber account, my 
     ICQ account, etc)
   - This is  a desktop-wide list of accounts shared by all applications (via 
     the Mission Control service)
     - most developers probably won't need to deal with them much.
   - This is not a list of remote accounts held by my contacts.
   - Includes the parameters which are passed to RequestConnection().
   - Includes some other parameters such as your avatar/your alias, which the 
     AccountManager takes care of setting for you
   - Responds to connectivity events/requests.
  </para>
</chapter>

<chapter id="chapter-channel-dispatcher">
  <title>ChannelDispatcher</title>
  <para>TODO:
   Notes:
   - This is in mission control.
   - This dispatches some events to applications that care about them, by 
     calling a method on the ChannelHandler interface (that the application 
     implements). This API is currently in flux.
  </para>
</chapter>

<chapter id="chapter-connection-manager">
  <title>Connection Manager</title>

  <para>As mentioned in the <link linkend="sec-basics-connection-managers">Basics</link> chapter, each <ulink url="&url_spec_base;ConnectionManager">Connection Manager</ulink> provides support for a communication protocol.</para>

  <para>All Telepathy Connection Managers have <literal>bus name</literal>s that begin with &quot;org.freedesktop.Telepathy.ConnectionManager&quot; so you can discover all available connection managers by calling the D-Bus <ulink url="&url_dbus_spec_base;bus-messages-list-activatable-names"><function>ListActivatableNames()</function></ulink> method and then comparing the names with that prefix. telepathy-glib provides the <ulink url="&url_telepathy_glib_base;connection-manager.html#tp-list-connection-managers"><function>tp_list_connection_managers()</function></ulink> function that conveniently does this.</para>
  <para>You may then discover what protocols are provided by each connection manager by calling the ConnectionManagers's <ulink url="&url_spec_base;ConnectionManager.ListProtocols"><function>ListProtocols</function></ulink> D-Bus method. telepathy-glib's <ulink url="&url_telepathy_glib_base;connection-manager.html">TpConnectionManager</ulink> object calls this automatically and emits the <literal>got-info</literal> signal when it has returned. You can examine the TpConnectionManager::protocols struct field in your signal handler.</para>
  <para>Applications, such as IM clients, might choose to offer the user a choice from that list of protocols and then use the appropriate connection manager. Others might use only one protocol and therefore hard-code the connection manager's <literal>bus name</literal>.</para> 

  <sect1>
  <title>Example</title>
    <para>This example list all available connection managers and the protocols that they support.</para>
    <para><ulink url="&url_examples_base;list_all_protocols">Source Code</ulink></para>
  </sect1>

</chapter>

<chapter id="chapter-connection">
  <title>Connection</title>
  
  <sect1>
    <title>Connecting</title>
    <para>To attempt a connection to the remote server, call a Connection Manager's <ulink url="&url_spec_base;ConnectionManager.RequestConnection"><function>RequestConnection</function></ulink> D-Bus method, providing the connection details. If the connection succeeds then this method returns the <literal>bus name</literal> and <literal>object path</literal> of a Telepathy <ulink url="&url_spec_base;Connection">Connection</ulink> object.</para>
    <para>As of this writing, there is no hand-coded telepathy-glib function to request the connection and directly provide a <ulink url="&url_telepathy_glib_base;connection.html">TpConnection</ulink> proxy. However, you may use the generated <ulink url="&url_telepathy_glib_base;connection-manager.html#tp_cli_connection_manager_call_request_connection"><function>tp_cli_connection_manager_call_request_connection()</function></ulink> function. In the callback, you can then use the provided <literal>bus name</literal> and <literal>object path</literal> to instantiate a TpConnection proxy object.</para>
    <note><para>See the <link linkend="sec-basics-language-bindings-telepathy-glib-generated">Basics</link> chapter for an explanation of hand-coded and generated API in telepathy-glib.</para></note>

    <sect2>
      <title>Connection Example</title>
      <para>This example connects to a jabber account.</para>
      <para><ulink url="&url_examples_base;connect">Source Code</ulink></para>
    </sect2>
  </sect1>

  <sect1>
    <title>TODO</title>
  <para>TODO:
   Notes:
   - This is my connection to my IM account.
   - A connection has <ulink url="&url_spec_base;Channel">Channel</ulink>s.
   - Connection gives me several <ulink url="&url_spec_base;Channel.Type.ContactList">ContactList</ulink> Channels (subscribe, publish, etc)
     - Provides a <ulink url="&url_spec_base;Channel.Interface.Group">Group</ulink> interface.
       - Contains many members (Contact handles). Note that there is no Contact interface or object (just a handle), for performance reasons.
   - Has several optional interfaces (Avatars, Presence, etc).
     - And some optional interfaces that just improve similar existing interfaces, such as <ulink url="&url_spec_base;Connection.Interface.Requests">Connection.Interface.Requests</ulink>
       instead of <ulink url="&url_spec_base;Connection.RequestChannel">Connection.RequestChannel</ulink>
   - Provides a <ulink url="&url_spec_base;Connection.Interface.SimplePresence">SimplePresence</ulink> interface, to which I can give a contact handle 
     to discover if that contact is online. The SimplePresence interface emits 
     signals when contacts' presence changes.
     (SimplePresence replaces the <ulink url="&url_spec_base;Connection.Interface.Presence">Presence</ulink> interface, to be deprecated soon.)
   - Similarly, the <ulink url="&url_spec_base;Connection.Interface.Avatars">Avatars</ulink> and <ulink url="&url_spec_base;Connection.Interface.Aliasing">Aliasing</ulink> interfaces on the Connection provide 
     other information about contacts, and notifications when they change. 
   - (Having interfaces on the connection rather than the contacts makes 
     overall contact handling easier.)
   - Has a <ulink url="&url_spec_base;Connection.RequestChannel">RequestChannel()</ulink> method that takes a channel type (text/voip/tubes) 
     and a handle (contact, room, list or group) handle. 
   - A new <ulink url="&url_spec_base;Connection.Interface.ContactCapabilities.DRAFT">ContactCapabilities</ulink> interface will allow retrieving of multiple 
     types of information at once (string of handle, alias, avatar, presence, etc), 
     which is more efficient.
  </para>
  </sect1>


  <sect1>
  <title>Presence Example</title>
  <para>This example sets the presence for a jabber account.</para>
  <para><ulink url="&url_examples_base;set_presence">Source Code</ulink></para>
  </sect1>

</chapter>

<chapter id="chapter-channel">
  <title>Channel</title>
  <para>TODO:
   Notes:
   - <ulink url="&url_spec_base;Connection.RequestChannel">Connection.RequestChannel</ulink>, <ulink url="&url_spec_base;Channel">Channel</ulink>
   - Allows data exchange between the local account and a remote IM account 
     (or group of remote accounts).
   - Only an application knows about actual people (who might have many IM 
     accounts).
   - (We need to call them something other than "IM accounts" because it is not 
     just IM. It can be "people nearby", for instance.)
   - Maybe an instance of one of these communication types: Text, Contact List, 
     Streamed Media.
   - Channel provides (maybe _is_) a contacts list. Usually 2 people (local me 
     and my remote contact), but x people for a chat group.
   - The base Channel interface provides channel type, handle and interface 
     properties, and Close method, Closed signal.
   - Plus one type-specific interface, such as Text, or Tube, Media.
   - This is also sometimes a <ulink url="&url_spec_base;Channel.Interface.Group">Group</ulink> interface, for instance if it's a group chat.
   - Optional interfaces such as Group are discovered by inspecting the 
     Interfaces property.
   - Media channels may have DTMF, Hold, CallStates (on hold, ringing, etc) 
     interfaces
   - Text channels may have ChatState (typing notification), Messages (rich 
     messages), Password interfaces
   - Mention basic channel requesting and then advanced channel requesting.
     (The new API makes it easier to do these things.)
   - You'd need two channels for two types of communication with the same 
     contact. (At least with the new API.)
   - Has capabilities. (API will change).
     - Tells me what type of channel I can open on a connection/contact. 
       For instance, text/media/tube.
  </para>

  <sect1>
  <title>Example</title>
  <para>This example sends a text message to a jabber contact via a text channel.</para>
  <para><ulink url="&url_examples_base;send_message">Source Code</ulink></para>
  </sect1>

</chapter>

<chapter id="chapter-group">
   <title>Group Interface</title>
   <para>TODO:
   (used in lots of different channels)
   - This is partitioned into:
     - Current members
     - Local pending members, awaiting approval (by doing Add or Remove) by the 
       local user.
     - Remote pending members, awaiting approval remotely by the other user)
   - Unusually, one-to-one calls use the <ulink url="&url_spec_base;Channel.Interface.Group">Group</ulink> interface to indicate call 
     progression (explain in call section?).
  </para>
</chapter>

<chapter id="chapter-tubes">
  <title>Tubes</title>
  <para>TODO:
   - Helps me to implement an ad-hoc protocol or data-exchange structure above 
     what the IM protocol does.
   - You wouldn't need a tube for a chat, because the IM protocol has that 
     already, but you'd need to implement more for some custom thing like 
     networking of a game.
   - Streamed Media Channels
  </para>
</chapter>

<!-- TODO:
Wait for the new specs (2008, Q3):
   - Capabilities interface(s) on Connection
   - Channel Dispatching
   - Channel Requesting
   - Client interfaces
-->

<!--
Note: The following sections are more tutorial-like, describing how to implement 
real functionality, with full examples. The full examples will have a very 
simple GTK+ UI and will be implemented with dbus-glib. There will also be small 
code snippets which will also be in dbus-glib, but python versions could be 
added in future.
-->

<chapter id="chapter-contacts">
  <title>Accessing/managing contact information</title> <!-- TODO: rename the title. -->
  <para>TODO:
 - Contact Lists
   - publish/subscribe
   - Groups
 - Contact Information
   - Aliases
   - Avatars
   - Presence
  </para>

  <sect1>
  <title>Example</title>
  <para>This example connects to a jabber account and lists all contacts for that account.</para>
  <para><ulink url="&url_examples_base;list_contacts">Source Code</ulink></para>
  </sect1>

</chapter>

<chapter id="chapter-chat-client">
  <title>Implementing a Chat Client</title>
  <para>TODO:
 - Text Channels (Messages Interface?)
  </para>
</chapter>

<chapter id="chapter-voip-client">
  <title>Creating a VoIP Client</title>
  <para>TODO: 
  (Streaming Audio/Video)
  - Will require some gstreamer knowledge for recording and playback.
  </para>
</chapter>

<chapter id="chapter-transferring-files">
  <title>Transferring Files</title>
  <para>TODO
  </para>
</chapter>

<chapter id="chapter-networked-application">
  <title>Making an application networked</title> <!-- TODO: Rename the title. -->
  <para>TODO:
  - For instance, turn-based Tic-Tac-Toe.
  </para>
</chapter>

<index id="refindex">
</index>

</book>
