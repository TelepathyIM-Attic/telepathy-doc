<?xml version='1.0'?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
               "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY mdash "&#8212;">
  <!ENTITY ellipsis "&#8230;">
]>

<chapter id="chapter.services">
  <title>Implementing Telepathy Services</title>

  <para>
   Occasionally you may wish to implement your own Telepathy service, a
   program that implements a Telepathy API interface. Most commonly this
   will be <interfacename>org.freedesktop.Telepathy.Client</interfacename>
   (see <xref linkend="sect.channel-dispatcher.clients"/> for the high-level
   details on implementing Telepathy Clients),
   but equally you could implement a Connection Manager, or some other
   Telepathy interface.
  </para>
  <para>
   This is done by implementing the D-Bus API for each interface as
   detailed in the
   <ulink url="http://telepathy.freedesktop.org/spec/">Telepathy
   Specification</ulink>. To make this simpler, the various Telepathy API
   bindings provide support for writing Telepathy services.
  </para>

  <sect1 id="sect.services.glib">
   <title>telepathy-glib</title>

   <important>
    <title>Implementing GObjects</title>
    <para>
     This section of the manual assumes that you're already familiar with
     implementing a GObject in the C programming language. If you're not, we
     recommend reading the FIXME NEED SOME RESOURCES HERE.
    </para>
   </important>

   <para>
    The <application>telepathy-glib</application> bindings provide a
    mechanism for implementing D-Bus interfaces as
    <classname>GInterface</classname> interfaces on a
    <classname>GObject</classname>. These interfaces begin with the
    namespace <classname>TpSvc</classname>&ellipsis; and have GTypes beginning
    with <type>TP_TYPE_SVC_</type>&ellipsis;.
   </para>

   <para>
    <application>telepathy-glib</application> also provides class mixins
    that can be used to implement support for functionality such as D-Bus
    properties and other Telepathy interfaces.
   </para>

   <para>
    <classname>GObject</classname>s that implement these interfaces and
    mixins can be published via D-Bus using the standard
    <application>dbus-glib</application> function call
    <function>dbus_g_connection_register_g_object</function>.
   </para>

   <sect2 id="sect.services.glib.iface">
    <title>Implementing a D-Bus Interface</title>

    <para>
     D-Bus method interfaces are provided by
     <application>telepathy-glib</application> as regular GInterfaces to
     be implemented by your class.
    </para>

    <para>
     For example, we have implemented our own class
     <classname>ExampleObserver</classname> which implements the
     <interfacename>Client</interfacename> and
     <interfacename>Client.Observer</interfacename> interfaces (also the
     D-Bus properties mixin, <link>see below</link>). The type definition
     for this class is presented in
     <xref linkend="ex.services.glib.iface.define-type"/>.
    </para>

    <example id="ex.services.glib.iface.define-type"
             file="glib_mc5_observer/example-observer.c">
     <title>Defining the Type</title>
    </example>

    <tip>
     <para>
      In <xref linkend="ex.services.glib.iface.define-type"/>, interfaces
      that implement no methods (i.e. <classname>Client</classname>) do not
      need to provide initialisation methods and <literal>NULL</literal> may
      be passed instead.
     </para>
    </tip>

    <para>
     Unlike with most GInterfaces, which use a vcall table to map interface
     methods to implementations, <application>telepathy-glib</application>
     uses method calls. This is simply to avoid potential ABI problems in
     the future.
    </para>

    <para>
     Each method has an "implement" function, of the form
     <literal>tp_svc_interface_name_implement_method_name</literal> which
     accepts a method of the prototype
     <literal>tp_svc_interface_name_method_name_impl</literal>. For example,
     the method call
     <methodname>Client.Observer.ObserveChannels</methodname> is connected
     using the function
     <function>tp_svc_client_observer_implement_observe_channels</function>
     which accepts a function with the prototype of
     <function>tp_svc_client_observer_observe_channels_impl</function>.
     This is shown in
     <xref linkend="ex.services.glib.iface.long-iface-init"/>.
     <xref linkend="ex.services.glib.iface.method"/> shows the corresponding
     method implementation.
    </para>

    <example id="ex.services.glib.iface.long-iface-init">
     <title>Initialising the Interface</title>
     <programlisting language="c">
<![CDATA[static void
observer_iface_init (gpointer g_iface, gpointer iface_data)
{
  TpSvcClientObserverClass *klass = (TpSvcClientObserverClass *) g_iface;

  tp_svc_client_observer_implement_observe_channels (klass,
      example_observer_observer_channels);
}]]></programlisting>
    </example>

    <tip>
     <para>
      To save excessive typing for interfaces with lots of methods, you can
      use a temporary <literal>IMPLEMENT</literal> macro, as demonstrated
      in <xref linkend="ex.services.glib.iface.iface-init"/> which is
      functionality identical to
      <xref linkend="ex.services.glib.iface.long-iface-init"/>.
     </para>

     <example id="ex.services.glib.iface.iface-init"
              file="glib_mc5_observer/example-observer.c">
      <title>Initialising the Interface</title>
     </example>
    </tip>

    <example id="ex.services.glib.iface.method"
             file="glib_mc5_observer/example-observer.c">
     <title>Method Implementation for ObserveChannels</title>
    </example>

    <para>
     Method implementations may be either synchronous or asynchronous as you
     desire, however while your mainloop is blocked in a method call your
     service will be unable to handle any other incoming method calls
     (or other mainloop events, such as a client UI). When you are ready to
     return from the method call, call the appropriate
     <literal>return_from</literal> function, which will be of the form
     <literal>tp_svc_interface_name_return_from_method_name</literal>, e.g.
     <literal>tp_svc_client_observer_return_from_observe_channels</literal>
     (<xref linkend="ex.services.glib.iface.method"/>).
    </para>

   </sect2>

   <sect2 id="sect.services.glib.properties">
    <title>Implementing D-Bus Properties (TpDBusPropertiesMixin)</title>

    <para>
     <application>telepathy-glib</application> provides a special class
     mixin for handling D-Bus properties,
     <classname>TpDBusPropertiesMixin</classname>.
    </para>

    <note>
     <title>Mixins</title>
     <para>
      Mixins are so called because they are mixed into a class to extend its
      functionality. For example, a class might inherit from
      <classname>GObject</classname> or some subclass, but then has the
      <classname>TpDBusPropertiesMixin</classname> to add additional
      functionality without having to inherit from a different class.
     </para>
     <para>
      It is functionally similar to multiple inheritance, which is not
      available in GLib.
     </para>
    </note>

    <para>
     To add the D-Bus properties mixin to your class, several steps are
     required:
    </para>

    <itemizedlist>
     <listitem><para>
      When you register support for the D-Bus properties interface, pass the
      mixin initialiser,
      <function>tp_dbus_properties_mixin_iface_init</function>. See
      <xref linkend="ex.services.glib.iface.define-type"/>.
     </para></listitem>
     <listitem>
      <para>
       Your class structure needs to include the
       <classname>TpDBusPropertiesMixinClass</classname>
       (<xref linkend="ex.services.glib.properties.class"/>).
      </para>
      <example id="ex.services.glib.properties.class"
               file="glib_mc5_observer/example-observer.h">
       <title>Class structure</title>
      </example>
     </listitem>
     <listitem>
      <para>
       The simplest way to use this mixin is to map D-Bus properties to
       GObject properties.
       Your class' class_init method provides the mapping from D-Bus
       property names to GObject property names.
      </para>
      <para>
       Each D-Bus interface requires a NULL-terminated array of
       <type>TpDBusPropertiesMixinPropImpl</type> structures which provide
       the mappings between property names. The class also requires a
       NULL-terminated array of <type>TpDBusPropertiesMixinIfaceImpl</type>,
       which gives the D-Bus interface name, and getter and setter for each
       interface as shown in
       <xref linkend="ex.services.glib.properties.prop-mappings"/>.
      </para>
      <example id="ex.services.glib.properties.prop-mappings"
               file="glib_mc5_observer/example-observer.c">
       <title>Property Mappings</title>
      </example>
      <para>
       The mixin provides default getter and setter functions,
       <function>tp_dbus_properties_mixin_getter_gobject_properties</function>
       and
       <function>tp_dbus_properties_mixin_setter_gobject_properties</function>
       for mapping D-Bus properties to GObject properties.
      </para>
      <tip>
       <para>
        If you wish, rather than using GObject properties, you may write
	your own getter and setter functions for handling D-Bus properties.
       </para>
       <para>
        The data provided to <type>TpDBusPropertiesMixinPropImpl</type> will
	be passed as the data to your callback.
       </para>
      </tip>
     </listitem>
     <listitem>
      <para>
       You must chain up the mixin's class_init method at the end of your
       class' class_init, as shown in
       <xref linkend="ex.services.glib.properties.chain-up"/>.
      </para>
      <example id="ex.services.glib.properties.chain-up"
               file="glib_mc5_observer/example-observer.c">
       <title>Property Mappings</title>
      </example>
     </listitem>
    </itemizedlist>
   </sect2>

   <sect2 id="sect.services.glib.signals">
    <title>Emitting D-Bus Signals</title>

    <para>
     Emitting a signal is done via calling the function of the form
     <literal>tp_svc_interface_name_emit_signal_name</literal>, for instance
     emitting the <methodname>Account.AccountPropertyChanged</methodname>
     signal is done via the
     <function>tp_svc_account_emit_account_property_changed</function>
     function.
    </para>

   </sect2>

  </sect1>

  <sect1 id="sect.services.python">
   <title>telepathy-python</title>
   <para>
    Services in <application>telepathy-python</application> are built off
    the service publishing built into
    <ulink url="http://dbus.freedesktop.org/doc/dbus-python/doc/tutorial.html#exporting-objects">dbus-python</ulink>.
    However, to make implementing services easier,
    <application>telepathy-python</application> already provides interfaces and
    abstract base classes with all of the method decoration required already
    supplied.
   </para>

   <sect2 id="sect.services.python.object">
    <title>Implementing a D-Bus Object</title>
    <para>
     <application>telepathy-python</application> provides interfaces and
     abstract base classes for most Telepathy services you need to implement
     in the <literal>telepathy.server</literal> namespace.
     To implement a D-Bus object which can be published on the bus, you just
     need to subclass as many of these classes as required for the
     interfaces provided by your particular object.
    </para>

    <para>
     <xref linkend="ex.services.python.object"/> demonstrates publishing an
     <link linkend="sect.channel-dispatcher.clients.impl.observer">Observer</link>
     on the bus that implements
     <interfacename>Client.Observer</interfacename> and
     <interfacename>DBus.Properties</interfacename>.
    </para>

    <example id="ex.services.python.object"
             file="python_mc5_clients/observer.py">
     <title>Implementing Client.Observer and D-Bus Properties</title>
    </example>

    <para>
     The <methodname>ObserveChannels</methodname> method is already
     decorated with <methodname>dbus.service.method</methodname> by the
     <classname>telepathy.server.ClientObserver</classname> parent
     class, so doesn't need to be decorated in your subclass.
     However, we can redecorate
     the method if we want to change any of the parameters to
     <methodname>dbus.service.method</methodname> (e.g. using
     <parameter>async_callbacks</parameter>, which is useful when you need
     to emit a signal after returning from a D-Bus call). When doing this,
     the input and output signatures need to be provided again. See
     <xref linkend="ex.services.python.method.redecorate"/>.
    </para>

    <tip>
     <title>Emitting Signals after 'Returning'</title>
     <para>
      Many times, the Telepathy specification requires a service to return
      from a method call before emitting any signals. The
      <parameter>async_callbacks</parameter> parameter to the
      <methodname>dbus.service.method</methodname> decorator is how to
      implement this.
     </para>
     <para>
      See <xref linkend="ex.services.python.method.redecorate"/> for an
      example.
     </para>
    </tip>

    <example id="ex.services.python.method.redecorate">
     <title>Redecorating a Method Call</title>
     <programlisting language="python"><![CDATA[@dbus.service.method(CONNECTION_INTERFACE_REQUESTS,
    in_signature='a{sv}', out_signature='boa{sv}',
    async_callbacks=('_success', '_error'))
def EnsureChannel(self, request, _success, _error):

    # code goes here

    # return success over D-Bus
    _success(yours, channel._object_path, props)

    # emit a signal
    self.signal_new_channels([channel])]]></programlisting>
    </example>
   </sect2>

   <sect2 id="sect.services.python.publishing">
    <title>Publishing an Object on the Bus</title>
    <para>
     Publishing a Telepathy object on the bus is just like publishing any
     other object with <application>dbus-python</application>.
     <xref linkend="ex.services.python.publishing"/> shows publishing our
     example Observer on the session bus.
    </para>

    <example id="ex.services.python.publishing"
             file="python_mc5_clients/observer.py">
     <title>Publishing a Client on the Bus</title>
    </example>
   </sect2>

   <sect2 id="sect.services.python.dbusproperties">
    <title>D-Bus Properties</title>

    <para>
     D-Bus properties are handled via the
     <classname>telepathy.server.DBusProperties</classname> base class,
     which your class should inherit from.
    </para>
    <para>
     Call the method <methodname>_implement_property_get</methodname> to
     provide a dictionary of the properties for a given interface.
     Properties are provided as Python callables, so static properties can
     be defined using <methodname>lambda</methodname>. See
     <xref linkend="ex.services.python.object"/> for an example.
    </para>
   </sect2>
  </sect1>
</chapter>
