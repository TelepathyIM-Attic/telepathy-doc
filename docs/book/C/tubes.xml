<?xml version='1.0'?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
               "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY mdash "&#8212;">
]>

<chapter id="chapter.tubes">
 <title>Tubes</title>

 <para>
  Telepathy Tubes provide a user-to-user or user-to-group networking layer
  which applications can use to transfer data. Unlike a traditional
  peer-to-peer network, which requires IP addresses or a service discovery
  mechanism for locating peers, Telepathy Tubes provides contact-to-contact
  data transfer. Telepathy connection managers handle network traversal
  using the same technology as for file transfer and streamed media.
 </para>

 <para>
  Telepathy currently offers two data formats for Tubes.
  <interfacename>StreamTube</interfacename> channels allow for a regular
  network socket to be shared between clients. This is best when adapting
  existing applications or protocols to run over Telepathy Tubes.
  <interfacename>DBusTube</interfacename> channels allow for a D-Bus bus to
  be shared between clients. This enables the use of D-Bus method calling and
  signalling rather than requiring the developer to develop their own
  network protocol and should be strongly considered for new applications.
 </para>

 <para>
  Telepathy Tubes can either be one-to-one (between two users) or
  one-to-many (between a group of users).
 </para>

 <note>
  <title>An Example of Using Tubes in Your Application</title>

  <para>
   Alice wants Bob’s help in editing her report. In Alice’s word processor
   she chooses the option to collaboratively edit this document and she is
   shown a list of instant-messaging contacts who are enabled for Telepathy
   Tubes. She selects Bob's name from the list.
  </para>

  <para>
   The application requests an appropriate Tube channel from the Connection
   Manager. This channel is received and dispatched by Telepathy on Bob's
   computer. He is asked if he wishes to collaborate with Alice.
  </para>

  <para>
   Bob accepts the channel. The Telepathy Connection Managers set up the
   best data stream from the available options given the type of network and
   the communications protocol.
  </para>
 </note>

 <sect1 id="sect.tubes.setup">
  <title>Creating a Tube</title>

  <para>
   Telepathy Tubes are created by calling
   <methodname>CreateChannel</methodname> with the type of Tube, target and
   required properties (see <xref linkend="sect.channel.requesting"/>). The
   target can either be a contact (<type>Handle_Type_Contact</type>) or a room
   (<type>Handle_Type_Room</type>). <xref linkend="ex.tubes.setup.maps"/>
   gives some example parameter maps to create Tubes.
  </para>

  <warning>
   <title>Don't Use Old (Deprecated) Tubes API</title>

   <para>
    Telepathy originally had a different API for implementing Telepathy
    Tubes,
    <interfacename>org.freedesktop.Telepathy.Channel.Type.Tubes</interfacename>.
   </para>
   <para>
    This API was deprecated because it had several serious design flaws and
    did not allow for future expansion.
   </para>
  </warning>

  <example id="ex.tubes.setup.maps">
   <title>Example Parameter Maps to Create Tubes</title>
   <informaltable>
    <title>D-Bus, One-to-One Tube</title>
    <tgroup cols="2">
     <tbody>
      <row>
       <entry>org.freedesktop.Telepathy.Channel.ChannelType</entry>
       <entry><interfacename>org.freedesktop.Telepathy.Channel.Type.DBusTube</interfacename></entry>
      </row>
      <row>
       <entry>org.freedesktop.Telepathy.Channel.TargetHandleType</entry>
       <entry><type>Handle_Type_Contact</type></entry>
      </row>
      <row>
       <entry>org.freedesktop.Telepathy.Channel.TargetID</entry>
       <entry>"bob@example.com"</entry>
      </row>
      <row>
       <entry>org.freedesktop.Telepathy.Channel.Type.DBusTube.ServiceName</entry>
       <entry>"com.example.ExampleService"</entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>

   <informaltable>
    <title>D-Bus, One-to-Many Tube</title>
    <tgroup cols="2">
     <tbody>
      <row>
       <entry>org.freedesktop.Telepathy.Channel.ChannelType</entry>
       <entry><interfacename>org.freedesktop.Telepathy.Channel.Type.DBusTube</interfacename></entry>
      </row>
      <row>
       <entry>org.freedesktop.Telepathy.Channel.TargetHandleType</entry>
       <entry><type>Handle_Type_Room</type></entry>
      </row>
      <row>
       <entry>org.freedesktop.Telepathy.Channel.TargetID</entry>
       <entry>"tubegame@conference.xmpp.example.com"</entry>
      </row>
      <row>
       <entry>org.freedesktop.Telepathy.Channel.Type.DBusTube.ServiceName</entry>
       <entry>"com.example.TubeGame"</entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>

   <informaltable>
    <title>Stream, One-to-One Tube</title>
    <tgroup cols="2">
     <tbody>
      <row>
       <entry>org.freedesktop.Telepathy.Channel.ChannelType</entry>
       <entry><interfacename>org.freedesktop.Telepathy.Channel.Type.StreamTube</interfacename></entry>
      </row>
      <row>
       <entry>org.freedesktop.Telepathy.Channel.TargetHandleType</entry>
       <entry><type>Handle_Type_Contact</type></entry>
      </row>
      <row>
       <entry>org.freedesktop.Telepathy.Channel.TargetID</entry>
       <entry>"bob@example.com"</entry>
      </row>
      <row>
       <entry>org.freedesktop.Telepathy.Channel.Type.StreamTube.Service</entry>
       <entry>"ssh"</entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </example>

  <para>
   Once the initiator has created the channel, it must be offered to the
   receipient/group. This is done by calling the
   <methodname>Offer</methodname> method. The parameters to this method
   depend on the type of Tube that is being offered. Once the Tube is
   offered it will be in the <literal>Remote Pending</literal> state.
  </para>

  <important><para>
   Calling the <methodname>Offer</methodname> method requires you to be able
   to establish a contact's capabilities. For some protocols, e.g. XMPP,
   this requires being subscribed to the contact's presence.
  </para></important>

  <para>
   <xref linkend="fig.tubes.setup"/> presents an overview of setting up a
   Tube.
  </para>

  <figure id="fig.tubes.setup">
   <title>Flowchart for Setting up a Tube</title>
   <mediaobject><imageobject>
    <imagedata fileref="figures/tube-actors.png"
               format="PNG" />
   </imageobject></mediaobject>
  </figure>
 </sect1>

 <sect1 id="sect.tubes.dbus">
  <title>D-Bus Tubes</title>

  <para>
   D-Bus Tubes allow you to share a private D-Bus bus between two or more
   clients, proxied over Telepathy. This allows clients to make method calls
   and emit signals using regular D-Bus semantics rather than requiring an
   individual RPC protocol to be developed.
  </para>

  <para>
   For one-to-one D-Bus Tubes, the Tube behaves like a peer-to-peer D-Bus
   connection. The sender and destination addresses are arbitrary and the
   other client receives all D-Bus messages that are sent.
  </para>

  <para>
   For multi-user D-Bus Tubes Telepathy
   sets up a private, peer-to-peer D-Bus "bus" brokered by the
   Telepathy Connection Managers. There is, however, no service through
   which to register or lookup service names. Requests should be made using
   a client's <literal>unique name</literal> (see
   <xref linkend="sect.basics.dbus"/>). Instead
   a mapping of Telepathy contact handles to D-Bus addresses is made
   available via the <property>DbusNames</property> property.
  </para>

  <note>
   <para>
    D-Bus Tubes, especially MUC D-Bus Tubes, may prove unsuitable for
    high-bandwidth communication.
    It is not possible to detect or specify the transport mechanism for a
    Telepathy Tube (e.g. out-of-band socket, or in-band with the protocol),
    nor determine what bandwidth is available.
   </para>
   <para>
    As it stands for multi-user Tubes in Telepathy-Gabble, D-Bus messages
    are transmitted between contacts inside XMPP messages relayed
    via the XMPP server rather than via peer-to-peer network sockets.
    Other types of Tubes will use a network socket (e.g. SOCKS5 bytestream)
    when it is available, else fall back to in-band messaging.
   </para>
  </note>

  <sect2 id="sect.tubes.dbus.offer">
   <title>Offering a D-Bus Tube</title>

   <para>
    When creating the Tube, you must specify the property
    <property>org.freedesktop.Telepathy.Channel.Type.DBusTube.ServiceName</property>,
    which gives the name of the D-Bus service you intend to offer. The
    remote contact will not receive the channel until you call the
    <methodname>Offer</methodname> method.
   </para>

   <para>
    The <methodname>DbusTube.Offer</methodname> method takes two parameters:
   </para>
   <orderedlist>
    <listitem><para>
     a map of arbitrary parameters to transmit with the Tube offer; and
    </para></listitem>
    <listitem><para>
     an access control flag.
    </para></listitem>
   </orderedlist>

   <para>
    The parameter map allows properties to be passed that will be useful in
    deciding whether to accept the Tube (e.g. the name of the file
    to collaborate on; or specifics of the game being played), or
    data about how to retrieve more information once the Tube has been
    established. Once the Tube has been offered, this map will remain
    available through the <property>Parameters</property> property.
   </para>

   <para>
    The access control flag should be set to
    <type>Socket_Access_Control_Localhost</type>. No other type makes sense
    for a D-Bus connection.
   </para>

   <para>
    If the contact does not support Tubes, <methodname>Offer</methodname>
    will return
    the <errorname>NotAvailable</errorname> error. Otherwise the address of
    a private D-Bus bus will be supplied.
   </para>

   <important>
    <para>
     You must be able to retrieve a contact's capabilities (i.e. call
     <methodname>GetContactCapabilities</methodname>) in order to determine
     whether or not a contact supports Tubes. For some protocols (e.g. XMPP)
     this requires you to be subscribed to the contact's presence.
    </para>
    <para>
     For a multi-user Tube, the room you are connecting to should already
     exist as a text channel. Create a text channel before offering the
     Tube.
    </para>
   </important>

   <para>
    The <property>State</property> property will change from
    <type>Tube_Channel_State_Not_Offered</type> to
    <type>Tube_Channel_State_Remote_Pending</type>, indicating that the
    remote contact has to accept the tube.
   </para>

   <para>
    <methodname>Offer</methodname> will return the address of a private
    D-Bus connection. This should be stored until the channel is
    in the state <type>Tube_Channel_State_Open</type> (listen for
    <methodname>TubeChannelStateChanged</methodname>), at which point the
    bus is ready to be connected to.
   </para>
  </sect2>

  <sect2 id="sect.tubes.dbus.accept">
   <title>Accepting a D-Bus Tube</title>

   <para>
    An incoming Tube appears as an incoming channel (see
    <xref linkend="sect.channel.newchannels"/>). The Tube will have two
    immutable properties that you can inspect;
    <property>ServiceName</property>, which was passed when creating the
    Tube channel, and <property>Parameters</property>, the map of parameters
    passed to <methodname>Offer</methodname>.
   </para>

   <para>
    The channel will be in the initial <property>State</property>
    <type>Tube_Channel_State_Local_Pending</type>, indicating that you have
    to <methodname>Accept</methodname> the Tube.
   </para>

   <para>
    The <methodname>DbusTube.Accept</methodname> method takes one property,
    the access control mode. This should be set to
    <type>Socket_Access_Control_Localhost</type>. No other mode makes sense
    for a D-Bus connection.
   </para>

   <para>
    Like <methodname>Offer</methodname>, <methodname>Accept</methodname>
    will return the address of a private D-Bus connection. This address
    should be stored until the channel's <property>State</property> changes
    to <type>Tube_Channel_State_Open</type>, as noted by the
    <methodname>TubeChannelStateChanged</methodname> property.
   </para>
  </sect2>

  <sect2 id="sect.tubes.dbus.open">
   <title>Communicating via D-Bus</title>

   <para>
    Connection to the private bus is done using
    <function>dbus_connection_open</function>,
    <function>dbus_g_connection_open</function> or other similar function.
   </para>

   <para>
    There is no "bus driver" present on this bus (nothing provides
    <literal>org.freedesktop.DBus</literal>), so there is no way to call
    D-Bus methods like <methodname>ListNames</methodname>,
    <methodname>RequestName</methodname>, and
    <methodname>GetNameOwner</methodname>, etc.
   </para>

   <para>
    For one-to-one channels, the Tube works like a private, peer-to-peer
    D-Bus connection. Any transmitted messages will arrive at the other end
    regardless of their source or destination addresses.
   </para>

   <para>
    For multi-user Tubes, the property <property>DbusNames</property>
    provides the mapping of Telepathy contact handles to D-Bus unique names.
    The signal <methodname>DBusNamesChanged</methodname> will be emitted
    when this property changes (e.g. users enter or leave the group).
   </para>

  </sect2>
 </sect1>

 <sect1 id="sect.tubes.stream">
  <title>Stream Tubes</title>

  <para>
   Stream Tubes allow you to proxy an existing network socket via Telepathy.
   Stream Tubes should be used when you wish to share an existing network
   protocol, for instance a HTTP stream, between two contacts.
  </para>

  <para>
   Unlike D-Bus Tubes, multi-user Stream Tubes are point-to-point between
   the offerer and the accepter (see
   <xref linkend="fig.tubes.stream.connections"/>). Stream Tubes cannot be
   used to multicast between members of the MUC room.
  </para>

  <figure id="fig.tubes.stream.connections">
   <title>Stream Tubes</title>
   <mediaobject><imageobject>
    <imagedata fileref="figures/stream-tubes.png"
               format="PNG" />
   </imageobject></mediaobject>
  </figure>

  <sect2 id="sect.tubes.stream.setup">
   <title>Offering a Stream Tube</title>

   <para>
    When creating a Stream Tube, you must specify the property
    <property>org.freedesktop.Telepathy.Channel.Type.StreamTube.Service</property>,
    which is the canonical name of the service your Tube is offering (e.g.
    ssh).
   </para>

   <para>
    The <methodname>StreamTube.Offer</methodname> method takes four
    parameters:
   </para>
   <orderedlist>
    <listitem><para>
     the socket type;
    </para></listitem>
    <listitem><para>
     the address of the service to offer
     (see <link linkend="note.tubes.stream.setup.variants">below</link>);
    </para></listitem>
    <listitem><para>
     an access control flag; and
    </para></listitem>
    <listitem><para>
     a map of arbitrary parameters to transmit with the Tube offer.
    </para></listitem>
   </orderedlist>

   <para>
    Stream Tubes differ from D-Bus Tubes in that it is assumed that a Stream
    Tube will frequently be used to proxy an existing protocol or
    service. Thus unlike for D-Bus Tubes or file transfer, the socket
    you wish to offer must already be set up and listening as if you were
    writing a regular network service. This address is then passed to
    the <methodname>Offer</methodname> method.
    The socket can either be a UNIX socket, an IPv4 socket or an IPv6
    socket.
   </para>

   <para>
    The appropriate access control should be chosen based on the socket type
    and the service. Typically it will be either
    <type>Socket_Access_Control_Localhost</type> or
    <type>Socket_Access_Control_Port</type>.
   </para>

   <para>
    Not all connection managers that support Stream Tubes support all
    combinations of address type and access control. Connection managers
    must at least offer IPv4 sockets with
    <type>Socket_Access_Control_Localhost</type>, other supported methods
    are listed in the <property>SupportedSocketTypes</property> property.
   </para>

   <para>
    The parameter map is the same as for D-Bus Tubes.
   </para>

   <note id="note.tubes.stream.setup.variants">
    <title>Address Variants</title>

    <para>
     For Stream Tubes, network addresses are passed as a variant type that
     varies based on the provided <type>Socket_Address_Type</type>. More
     information is provided in
     <xref linkend="tip.filetransfer.sending.decoding-address"/>.
    </para>
   </note>

   <sect3 id="sect.tubes.stream.setup.gnio">
    <title>Offering a Network Service using GNIO</title>

    <para>
     In general, Stream Tubes will be used to proxy an existing network
     protocol or application between contacts. However, if you wish to open
     your own socket, or your protocol library doesn't handle sockets for
     you, the you can serve your own network socket using GNIO.
    </para>

    <example id="ex.tubes.stream.setup.gnio"
             file="glib_stream_tube/offer-tube.c">
     <title>Using GNIO to Offer a Network Service</title>
    </example>

    <para>
     <application>telepathy-glib</application> provides API to convert
     between Telepathy address variants and
     <classname>GSocketAddress</classname> objects:
     <function>tp_address_variant_from_g_socket_address</function> and
     <function>tp_g_socket_address_from_variant</function>.
    </para>

   </sect3>
  </sect2>

  <sect2 id="sect.tubes.stream.accept">
   <title>Accepting a Stream Tube</title>

   <para>
    An incoming Stream Tube appears as an incoming channel (see
    <xref linkend="sect.channel.newchannels"/>). The Tube will have two
    immutable properties that you can inspect; <property>Service</property>,
    which is a TCP service name (this should be a well-known IANA or DNS-SD
    service name, e.g. "ssh" or "_raap._tcp") and
    <property>Parameters</property>, the map of parameters passed to
    <methodname>Offer</methodname>.
   </para>

   <para>
    The channel will be in the initial <property>State</property>
    <type>Tube_Channel_State_Local_Pending</type>, incidating that you have
    to <methodname>Accept</methodname> the Tube.
   </para>

   <para>
    The <methodname>StreamTube.Accept</methodname> method takes three
    properties: a <type>Socket_Address_Type</type>, the type of address for
    this socket (e.g. TCP), a <type>Socket_Access_Control</type>, and a
    variant access control parameter.
   </para>

   <important>
    <title>Optional Variants</title>
    <para>
     D-Bus provides no <literal>NULL</literal> type, so even in cases where
     an optional variant is not required, a variant value must be provided
     (e.g. integer 0).
    </para>

    <para>
     <xref linkend="ex.tubes.stream.accept.noop"/> provides an example for
     <application>telepathy-glib</application>.
    </para>

    <example id="ex.tubes.stream.accept.noop"
             file="glib_stream_tube/accept-tube.c">
     <title>Passing an ignored variant in telepathy-glib</title>
    </example>

   </important>

   <para>
    The <methodname>Accept</methodname> method will return an address
    variant of the appropriate for the requeseted
    <type>Socket_Address_Type</type> (see
    <link linkend="note.tubes.stream.setup.variants">above</link>).
   </para>
  </sect2>

 </sect1>

 <sect1 id="sect.tubes.compatibility">
  <title>Compatibility</title>

  <para>
   Support for Telepathy Tubes requires certain features in the connection
   manager and communications protocol, and thus cannot be supported by
   every connection manager. <xref linkend="table.tubes.compatibility"/>
   provides a list of known working connection managers.
  </para>

  <table id="table.tubes.compatibility">
   <tgroup cols="3">
    <thead>
     <row>
      <entry>Connection Manager</entry>
      <entry>One-to-One Tubes</entry>
      <entry>One-to-Many Tubes</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry>Gabble</entry>
      <entry>Stream, D-Bus</entry>
      <entry>Stream, D-Bus</entry>
     </row>
     <row>
      <entry>Salut</entry>
      <entry></entry>
      <entry></entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <note>
   <title>XMPP Protocol Support</title>

   <para>
    Telepathy Tubes over XMPP uses a protocol extension has been documented
    <ulink url="http://telepathy.freedesktop.org/xmpp/tubes.html">on the
    Telepathy website</ulink>. It has not been submitted as a XEP.
   </para>
  </note>

 </sect1>

</chapter>
