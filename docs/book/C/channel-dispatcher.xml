<?xml version='1.0'?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
               "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY mdash "&#8212;">
]>

<chapter id="chapter.channel-dispatcher">
  <title>Channel Dispatcher and Clients</title>

  <note>
   <para>
    The <interfacename>ChannelDispatcher</interfacename> interface is
    implemented in <application>Mission Control 5</application>.
   </para>
   <para>
    There are no channel dispatching capabilities available in
    <application>Mission Control 4</application>.
   </para>
  </note>

  <para>
   The Channel Dispatcher is responsible for discovering and launching
   Telepathy clients to handle incoming channels from accounts being managed
   by the <link linkend="chapter.accounts">Account Manager</link> and
   channels requested via the Channel Dispatcher (but not channels requested
   directly from a <interfacename>Connection</interfacename>, see
   <xref linkend="sect.channel.requesting"/>).
  </para>

  <para>
   Clients register a well-known name on the D-Bus session bus in the
   <literal>org.freedesktop.Telepathy.Client</literal> namespace. These are
   then picked up by the Channel Dispatcher which queries the appropriate
   properties to discover what manner of client it is.
   Clients may be launched via D-Bus activation if desired. A
   <filename>.client</filename> file is used to provide the D-Bus properties
   the Channel Dispatcher queries, allowing the Channel Dispatcher to only
   activate the client if required.
  </para>

  <para>
   The Channel Dispatcher is available via the well-known D-Bus name
   <literal>org.freedesktop.Telepathy.ChannelDispatcher</literal>, which
   publishes an object
   <literal>/org/freedesktop/Telepathy/ChannelDispatcher</literal>.
  </para>

  <tip>
   <title>Binding Constants</title>
   <para>
    These names and paths are available in the API bindings as named constants.
   </para>
   <informaltable>
    <tgroup cols="2">
     <colspec colname="item"/>
     <colspec colname="const"/>
     <tbody>
      <row>
       <entry namest="item" nameend="const" align="center">
        telepathy-glib
       </entry>
      </row>
      <row>
       <entry>Bus Name</entry>
       <entry>TP_CHANNEL_DISPATCHER_BUS_NAME</entry>
      </row>
      <row>
       <entry>Object Path</entry>
       <entry>TP_CHANNEL_DISPATCHER_OBJECT_PATH</entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </tip>

  <para>
   The Channel Dispatcher watches the
   <link linkend="chapter.connection">Connections</link> known to the
   <link linkend="chapter.accounts">Account Manager</link> and keeps track of
   what <link linkend="sect.channel-dispatcher.clients">Clients</link> are
   available to handle incoming and requested Channels from those Connections.
   When a new
   channel comes in, the Channel Dispatcher looks at the available clients, and
   the types of channels they handle and then selects clients to dispatch the
   channel to.
  </para>

  <para>
   There are three types of Telepathy Clients: Observers, Approvers and
   Handlers. These are described further in
   <xref linkend="sect.channel-dispatcher.clients"/>.
  </para>

  <para>
   The Channel Dispatcher will dispatch a channel to all running or
   activatable Observers and Approvers with a channel filter that matches
   the incoming channel. The Channel Dispatcher provides the Approver with a
   list of suitable Handlers, from which the Approver may make a choice.
  </para>

  <para>
   The Channel Dispatcher may also support error recovery in the case of
   broken or buggy clients. If a client crashes or generates an error when
   asked to handle the channel, the Dispatcher may attempt to use a
   different client instead.
  </para>

  <sect1 id="sect.channel-dispatcher.clients">
   <title>Telepathy Clients</title>

   <para>
    Telepathy Clients are applications that interact with Telepathy services
    to provide some service to the user. It could be a chat client, a VoIP
    client, a file transfer client, a Telepathy Tubes enabled application,
    or something else or maybe even some combination of these.
   </para>

   <para>
    Just like Telepathy Connection Managers, the Account Manager and the
    Channel Dispatcher, Telepathy Clients implement a D-Bus API that is
    used by the Channel Dispatcher to dispatch incoming channels to the
    client.
   </para>

   <figure id="fig.channel-dispatcher.clients.components">
    <title>Telepathy Components</title>
    <mediaobject><imageobject>
     <imagedata fileref="figures/telepathy-components.png"
                format="PNG" />
    </imageobject></mediaobject>
   </figure>

   <para>
    Telepathy Clients appear as D-Bus services registered or activatable on
    a user's session bus. Every running or activatable Telepathy client must
    provide a D-Bus well-known name of the form
    <literal>org.freedesktop.Telepathy.Client.<emphasis>clientname</emphasis></literal>
    (e.g. <literal>org.freedesktop.Telepathy.Client.Empathy</literal>) and
    an object with path of the form
    <literal>/org/freedesktop/Telepathy/Client/<emphasis>clientname</emphasis></literal>
    (e.g. <literal>/org/freedesktop/Telepathy/Client/Empathy</literal>).
   </para>

   <note>
    <title>D-Bus Activation</title>
    <para>
     Telepathy clients can be activated by the Channel Dispatcher using
     D-Bus Activation. This is done in the regular way by registering a
     <filename>.service</filename> file with D-Bus.
    </para>
    <para>
     An additional <filename>.client</filename>
     file is used by the Channel Dispatcher to look up properties such as
     what interfaces the client supports and what channels its interested
     in (see <xref linkend="sect.channel-dispatcher.clients.clientfile"/>
     below).
    </para>
    <para>
     An activatable client can be used by the Dispatcher to handle an
     incoming channel at any time. Examples of clients that might be
     activatable are clients for handling incoming text, VoIP or file
     transfers or Telepathy Tubes.
    </para>
    <para>
     Clients needn't be activatable if you only wish for a client to be
     considered by the Channel Dispatcher while the client is running.
     Applications that you wish to integrate with Telepathy, but do not wish
     to have launched except by the user are in this category. An example
     might be a full-screen media-centre type application.
    </para>
    <para>
     Be aware that <emphasis>all</emphasis> Approvers for a channel are
     dispatched (e.g. if six Approvers match a given incoming channel,
     that channel will be passed to all six clients), so generic Approvers
     (Approvers that aren't associated with a specific application &mdash;
     i.e. Tube applications) should not be activatable by D-Bus activation
     and instead be started by the desktop session.
    </para>
   </note>

   <para>
    There are three types of Telepathy clients:
   </para>
   <itemizedlist>
    <listitem><para><link linkend="sect.channel-dispatcher.clients.impl.observer">Observers</link>;</para></listitem>
    <listitem><para><link linkend="sect.channel-dispatcher.clients.impl.approver">Approvers</link>; and</para></listitem>
    <listitem><para><link linkend="sect.channel-dispatcher.clients.impl.handler">Handlers</link>.</para></listitem>
   </itemizedlist>

   <para>
    <interfacename>Observer</interfacename>s are used to monitor the creation
    of new channels and the status of those channels.
    <interfacename>Observer</interfacename>s can be used for functions such as
    chat logging, or monitoring file transfer progress.
    <interfacename>Observer</interfacename>s <emphasis>must not</emphasis>
    make method calls that are the role of the
    channel <interfacename>Handler</interfacename> (e.g. acknowledging chat
    messages), but they may change channel state as the result of user
    interaction (e.g. an <interfacename>Observer</interfacename> may
    offer the user a <guibutton>Cancel</guibutton> button to terminate a
    file transfer).
   </para>

   <para>
    <interfacename>Approver</interfacename>s serve to notify users of new
    channels and allow the user to accept or reject the channel. The
    <interfacename>Approver</interfacename> is also able to choose the
    preferred <interfacename>Handler</interfacename> for a channel from a
    list of possible <interfacename>Handler</interfacename>s (which
    it might choose to offer to the user or select based on some other
    criteria).
   </para>

   <para>
    <interfacename>Handler</interfacename>s do the heavy lifting to handle a
    channel. A <interfacename>Handler</interfacename> might be a
    text-chat or video-chat window, or a handler to receive a file or an
    application that uses Tubes for collaboration. Ultimately all
    interaction with a channel is done in the
    <interfacename>Handler</interfacename>, for instance
    acknowledging text messages.
   </para>

   <note>
    <title>Approvers vs Handlers</title>
    <para>
     It is the <interfacename>Approver</interfacename>'s job to accept the
     channel, but it should not call methods on the channel, that is the
     responsibility of the <interfacename>Handler</interfacename>.
    </para>
    <para>
     Take, for example, a file transfer channel. The
     <interfacename>Approver</interfacename> is tasked with asking the user
     to accept the incoming file transfer, providing the details about the
     incoming file; but the action of calling
     <methodname>AcceptFile</methodname> is the responsibility of the
     <interfacename>Handler</interfacename>.
    </para>
    <para>
     Often there will be a common <interfacename>Approver</interfacename>
     provided by the desktop.
     <!-- FIXME: we need some serious spec clarification here IMO -->
    </para>
   </note>

   <sect2 id="sect.channel-dispatcher.clients.impl">
    <title>Implementing a Telepathy Client</title>

    <para>
     Telepathy clients are services that implement a D-Bus API which is
     called by the Channel Dispatcher (just as the client itself makes
     method calls to the Account Manager and Connection Managers).
    </para>

    <para>
     All Telepathy clients must implement the
     <interfacename>org.freedesktop.Telepathy.Client</interfacename>
     interface plus (at least) one of
     <interfacename>org.freedesktop.Telepathy.Client.Observer</interfacename>,
     <interfacename>org.freedesktop.Telepathy.Client.Approver</interfacename>
     or
     <interfacename>org.freedesktop.Telepathy.Client.Handler</interfacename>.
    </para>

    <!-- FIXME para>
     The various Telepathy binding APIs provide straightforward procedures
     for implementing a Telepathy service (such as a Client). These methods
     are documented in <xref linkend="chapter.services"/>.
    </para -->

    <sect3 id="sect.channel-dispatcher.clients.impl.observer">
     <title>Implementing an Observer</title>

     <para>
      Observers need to implement the
      <interfacename>Client</interfacename> and
      <interfacename>Client.Observer</interfacename> interfaces. The
      <property>Client.Interfaces</property> property should include
      <interfacename>org.freedesktop.Telepathy.Client.Observer</interfacename>.
     </para>

     <para>
      The <property>ObserverChannelFilter</property> property must be
      implemented so that the Channel Dispatcher knows what types of
      channels your Observer is interested in.
     </para>

     <note id="note.channel-dispatcher.clients.impl.channel_class_list">
      <title>Channel Filters and Channel_Class_List</title>
      <para>
       Channel filters (i.e. <property>ObserverChannelFilter</property>,
       <property>ApproverChannelFilter</property> and
       <property>HandlerChannelFilter</property> all take a value of
       type <type>Channel_Class_List</type>. This is a list of key-value
       pair maps of channel properties, like those used to request channels,
       or provide information about incoming channels.
      </para>
      <para>
       Channels have their properties matched against the maps listed in
       the filter. Only certain D-Bus types have useful semantics for
       matching. These are listed in
       <xref linkend="table.channel-dispatcher.clients.impl.channel_class_list"/>.
      </para>

      <table id="table.channel-dispatcher.clients.impl.channel_class_list">
       <tgroup cols="3">
        <thead>
	 <row>
	  <entry>Type</entry>
	  <entry>D-Bus Type</entry>
	  <entry>Match rule</entry>
	 </row>
	</thead>
	<tbody>
	 <row>
	  <entry>Integers</entry>
	  <entry>y, n, q, i, u, x, t</entry>
	  <entry>
	   Matched for numeric equality, regardless of type. For
	   example 42 as a 16-bit signed integer 'n' is considered equal to
	   42 as a 32-bit unsigned integer 'u'.
	  </entry>
	 </row>
	 <row>
	  <entry>Booleans</entry>
	  <entry>b</entry>
	  <entry>
	   Matched for equality. Not considered equal to any other type.
	  </entry>
	 </row>
	 <row>
	  <entry>Strings</entry>
	  <entry>s</entry>
	  <entry>
	   Matched for equality. Not considered equal to any other type.
	  </entry>
	 </row>
	 <row>
	  <entry>Objects</entry>
	  <entry>o</entry>
	  <entry>
	   Matched for equality. Not considered equal to any other type.
	  </entry>
	 </row>
	</tbody>
       </tgroup>
      </table>

      <para>
       Specified properties are matched for equality, unspecified properties
       will not be matched. Thus, a filter to match all channels is a list
       containing an empty map. Only equality can be represented and the
       matching of each map is an OR operation.
       <xref linkend="ex.channel-dispatcher.clients.impl.channel_class_list"/>
       gives some examples.
      </para>
      <para>
       If you require more complex channel matching,
       you should install a more generic handlers and simply apply your
       own filtering rules when the Dispatcher gives you the channel.
      </para>

      <example id="ex.channel-dispatcher.clients.impl.channel_class_list">
       <title>Example Channel Filters</title>
       <para>
        This filter (a single empty map) matches all channels.
       </para>
       <programlisting language="python"><![CDATA[dbus.Array([
    dbus.Dictionary({
                    }, signature='sv'),
           ], signature='a{sv}')]]></programlisting>
       <para>
        This filter matches requested text channels that have a target
	handle which is either a contact or a chat room. This is
	semantically the same example as
	<xref linkend="ex.channel-dispatcher.clients.clientfile"/> below.
       </para>
       <programlisting language="python"><![CDATA[dbus.Array([
    dbus.Dictionary({
        'org.freedesktop.Telepathy.Channel.ChannelType':      'org.freedesktop.Telepathy.Channel.Type.Text',
	'org.freedesktop.Telepathy.Channel.TargetHandleType': HANDLE_TYPE_CONTACT,
	'org.freedesktop.Telepathy.Channel.Requested':        True,
                    }, signature='sv'),
    dbus.Dictionary({
        'org.freedesktop.Telepathy.Channel.ChannelType':      'org.freedesktop.Telepathy.Channel.Type.Text',
	'org.freedesktop.Telepathy.Channel.TargetHandleType': HANDLE_TYPE_ROOM,
	'org.freedesktop.Telepathy.Channel.Requested':        True,
                    }, signature='sv'),
           ], signature='a{sv}')]]></programlisting>
      </example>

     </note>

     <para>
      Finally the <methodname>ObserveChannels</methodname> method must be
      implemented. This method is called by the Channel Dispatcher whenever
      a new channel matching your filter arrives. It takes six parameters:
     </para>
     <informaltable>
      <tgroup cols="3">
       <thead>
        <row>
	 <entry>Parameter</entry>
	 <entry>Type</entry>
	 <entry>Description</entry>
	</row>
       </thead>
       <tbody>
	<row>
	 <entry>Account</entry>
	 <entry>o</entry>
	 <entry>
	  The path to the <interfacename>Account</interfacename> object.
	  Look this up on the Account Manager
	  (<literal>org.freedesktop.Telepathy.AccountManager</literal>).
	 </entry>
	</row>
	<row>
	 <entry>Connection</entry>
	 <entry>o</entry>
	 <entry>
	  The path to the <interfacename>Connection</interfacename> object.
	  Look this up with the Connection (remove the leading
	  <literal>/</literal> and replace all subsequent
	  <literal>/</literal>s with <literal>.</literal>s).
	 </entry>
	</row>
	<row>
	 <entry>Channels</entry>
	 <entry>
	  <type>Channel_Details_List</type> &mdash;
	  <literal>a(oa{sv})</literal>
	 </entry>
	 <entry>
	  The Channels to observe. Look these up using the well-known bus
	  name of the Connection.
	 </entry>
	</row>
	<row>
	 <entry>Dispatch Operation</entry>
	 <entry>o</entry>
	 <entry>
	  The path to the
	  <interfacename>ChannelDispatchOperation</interfacename>, or
	  <literal>/</literal> if there is no dispatch operation for this
	  dispatch. Look this
	  up on the Channel Dispatcher
	  (<literal>org.freedesktop.Telepathy.AccountManager</literal>).
	 </entry>
	</row>
	<row>
	 <entry>Requests Satisfied</entry>
	 <entry>ao</entry>
	 <entry>
	  Outgoing <interfacename>ChannelRequest</interfacename> objects
	  satisfied for this dispatch. Look these up on the Channel
	  Dispatcher
	  (<literal>org.freedesktop.Telepathy.AccountManager</literal>).
	 </entry>
	</row>
	<row>
	 <entry>Observer Info</entry>
	 <entry>a{sv}</entry>
	 <entry>Additional information for Observers.</entry>
	</row>
       </tbody>
      </tgroup>
     </informaltable>
    </sect3>

    <sect3 id="sect.channel-dispatcher.clients.impl.approver">
     <title>Implementing an Approver</title>

     <important><para>
      It is very rare that you will need to implement an
      <interfacename>Approver</interfacename>, in general the Approver will
      be provided by your desktop environment.
     </para></important>

     <para>
      Approvers are very similar to Observers. Approvers need to implement
      the <interfacename>Client</interfacename> and
      <interfacename>Client.Approver</interfacename> interfaces. The
      <property>Client.Interfaces</property> property must include
      <interfacename>org.freedesktop.Telepathy.Client.Approver</interfacename>.
     </para>

     <para>
      The <property>ApproverChannelFilter</property> property must be
      implemented so that the Channel Dispatcher knows what types of
      channels your Approver is interested in. This property has the
      <link linkend="note.channel-dispatcher.clients.impl.channel_class_list">same
      form</link> as for Observers.
     </para>

     <para>
      Finally the <methodname>AddDispatchOperation</methodname> method must
      be implemented. This method is called by the Channel Dispatcher
      whenever a new channel matching your filter arrives. This method has
      three parameters:
     </para>

     <informaltable>
      <tgroup cols="3">
       <thead>
        <row>
	 <entry>Parameter</entry>
	 <entry>Type</entry>
	 <entry>Description</entry>
	</row>
       </thead>
       <tbody>
        <row>
	 <entry>Channels</entry>
	 <entry>
	  <type>Channel_Details_List</type> &mdash;
	  <literal>a(oa{sv})</literal>
	 </entry>
	 <entry>
	  The intial value of the <property>Channels</property> property for
	  the dispatch operation. Provided so that it doesn't need to be
	  requested. Look these up using the well-known bus name of the
	  Connection.
	 </entry>
	</row>
	<row>
	 <entry>Dispatch Operation</entry>
	 <entry><literal>o</literal></entry>
	 <entry>
	  The <interfacename>ChannelDispatchOperation</interfacename> for
	  this dispatch. This object is provided by the Channel Dispatcher
	  (<literal>org.freedesktop.Telepathy.ChannelDispatcher</literal>).
	 </entry>
	</row>
	<row>
	 <entry>Properties</entry>
	 <entry><literal>a{sv}</literal></entry>
	 <entry>
	  The immutable properties for the dispatch operation, including the
	  <property>Account</property>, <property>Connection</property> and
	  <property>PossibleHandlers</property> properties. Provided so that
	  they needn't be requested.
	 </entry>
	</row>
       </tbody>
      </tgroup>
     </informaltable>

     <para>
      Each Approver should connect to the dispatch operation's
      <methodname>Finished</methodname> and
      <methodname>ChannelLost</methodname> signals. The
      <methodname>Finished</methodname> signal indicates that some Approver
      has handled the dispatch, and this dispatch object is no longer valid.
      The <methodname>ChannelLost</methodname> indicates that one of the
      original channels making up this dispatch has been closed for the
      reason given.
     </para>

     <para>
      If an Approver returns from
      <methodname>AddDispatchOperation</methodname> with no error, the
      Channel Dispatcher will assume the Approver accepts the dispatch and
      is offering it to the user, and thus will wait for the Approver to
      handle the dispatch operation by calling
      <methodname>Claim</methodname> or <methodname>HandleWith</methodname>
      methods. If you return from this method without error, you must intend
      to call one of these two functions, else the channel may never be
      dispatched to a Handler.
     </para>
     <para>
      To indicate you're not interested in approving a channel, return a D-Bus
      error from <methodname>AddDispatchOperation</methodname>.
     </para>
     <para>
      Otherwise call the <methodname>HandleWith</methodname> or
      <methodname>Claim</methodname> method on the dispatch operation.
     </para>
     <para>
      The <methodname>HandleWith</methodname> method tells the Channel
      Dispatcher to pass the dispatch to a Handler by calling
      <methodname>HandleChannels</methodname> on that Handler. You must
      either provide the name of a Handler from the list of possible Handlers
      provided in the <property>PossibleHandlers</property> property or an
      empty string if you wish to use the Channel Dispatcher's preferred
      Handler.
     </para>
     <para>
      <methodname>HandleWith</methodname> may return one of several errors,
      for instance raising <errorname>NotYours</errorname> if the dispatch has
      already been approved; or possibly even some error returned from
      <methodname>HandleChannels</methodname>.
     </para>
     <para>
      The <methodname>Claim</methodname> method tells the Channel Dispatcher
      that you are claiming the dispatch for yourself. Assuming the method
      returns without error (i.e. the dispatch wasn't already handled),
      the dispatch belongs to your client. The Channel
      Dispatcher will not call <methodname>HandleChannels</methodname> in
      this instance. Clients that claim a dispatch, but do not immediately
      reject it should also implement the
      <interfacename>Handler</interfacename> interface, specifically
      <property>HandledChannels</property>.
     </para>

     <note>
      <title>Rejecting Incoming Channels</title>
      <para>
       The <methodname>Claim</methodname> method is also used to reject an
       incoming dispatch.
      </para>
      <para>
       The Channel Dispatcher does not know how to politely close or reject
       the various types of different channels, and instead makes this the
       responsibility of the Telepathy Clients.
      </para>
      <para>
       To reject a dispatch, first <methodname>Claim</methodname> it. If
       this method returns without error (i.e. you have successfully claimed
       the dispatch), you can then close the channels in a way that is
       specific to the channel type (e.g. acknowledging the messages and
       calling <methodname>Close</methodname> or calling
       <methodname>Destroy</methodname>).
      </para>
      <para>
       Approvers that claim channels only to reject them do not need to
       present as Handlers.
      </para>
     </note>

    </sect3>

    <sect3 id="sect.channel-dispatcher.clients.impl.handler">
     <title>Implementing a Handler</title>
     <para>
      Handlers are the most commonly implemented class of Telepathy
      Client. Handlers need to implement the
      <interfacename>Client</interfacename> and
      <interfacename>Client.Handler</interfacename> interfaces. They may
      also optionally implement the
      <interfacename>Client.Interface.Requests</interfacename> interface.
     </para>
     <para>
      The <property>Client.Interfaces</property> property must include
      <interfacename>org.freedesktop.Telepathy.Client.Handler</interfacename>
      and optionally
      <interfacename>org.freedesktop.Telepathy.Client.Interface.Requests</interfacename>.
     </para>
     <para>
      The <property>HandlerChannelFilter</property> property must be
      implemented so that the Channel Dispatcher knows what types of
      channels your Handler is interested in. This property has the
      <link linkend="note.channel-dispatcher.clients.impl.channel_class_list">same
      form</link> as for Observers.
     </para>

     <!-- FIXME: is this correct? <tip>
      <title>Empty Filter</title>
      <para>
       An empty channel filter (containing no dictionary entries) is used
       for a Handler that only handles channels specifically designated to
       it.
      </para>
       <programlisting language="python"><![CDATA[dbus.Array([
           ], signature='a{sv}')]]></programlisting>
     </tip -->

     <para>
      The <property>Capabilities</property> property is the list of
      additional Telepathy capabilities this Handler supports.
      <!-- FIXME: link to section on Telepathy Capabilities -->
      These capabilities can also be listed in the
      <link linkend="sect.channel-dispatcher.clients.clientfile">.client
      file</link>.
     </para>
     <para>
      The <property>BypassApproval</property> property indicates that
      channels in your <property>HandlerChannelFilter</property>. This
      property is normally used when a Client registers a second Client
      object with channels that its expecting.
      <!-- FIXME: write more about this -->
     </para>
     <para>
      The <property>HandledChannels</property> property is a list of D-Bus
      object paths for Channels this Client is handling. This property only
      exists to recover state in the event of a Channel Dispatcher crash, so
      there is no need to emit a signal when the property is updated. This
      property should include the channels for any temporary transient
      Client objects registered by the client.
     </para>
     <para>
      The <methodname>HandleChannels</methodname> method must be
      implemented. This is the method the Channel Dispatcher will call to
      dispatch channels to a Handler, either because it chose a Handler or
      in response to an Approver calling
      <methodname>HandleWith</methodname> (this method is
      <emphasis>not</emphasis> called is an Approver calls
      <methodname>Claim</methodname>). The method takes six parameters:
     </para>
     <informaltable>
      <tgroup cols="3">
       <thead>
        <row>
	 <entry>Parameter</entry>
	 <entry>Type</entry>
	 <entry>Description</entry>
	</row>
       </thead>
       <tbody>
        <row>
	 <entry>Account</entry>
	 <entry>o</entry>
	 <entry>
	  The path to the <interfacename>Account</interfacename> object.
	  Look this up with the Account Manager
	  (<literal>org.freedesktop.Telepathy.AccountManager</literal>).
	 </entry>
	</row>
	<row>
	 <entry>Connection</entry>
	 <entry>o</entry>
	 <entry>
	  The path to the <interfacename>Connection</interfacename> object.
	 </entry>
	</row>
	<row>
	 <entry>Channels</entry>
	 <entry>
	  <type>Channel_Details_List</type> &mdash;
	  <literal>a(oa{sv})</literal>
	 </entry>
	 <entry>
	  The Channels to be handled, as well as their immutable properties.
	 </entry>
	</row>
	<row>
	 <entry>Requests Satisfied</entry>
	 <entry>ao</entry>
	 <entry>
	  The Channel Requests that are handled by this dispatch (see
	  <link linkend="sect.channel-dispatcher.clients.impl.handler.requests">below</link>).
	  Look these up with the Channel Dispatcher
	  (<literal>org.freedesktop.Telepathy.Channel Dispatcher</literal>).
	 </entry>
	</row>
	<row>
	 <entry>User Action Time</entry>
	 <entry>t</entry>
	 <entry>
	  The time at which this user action occured (or 0 if
	  unknown). Used for focus stealing prevention.
	 </entry>
	</row>
	<row>
	 <entry>Handler Info</entry>
	 <entry>a{sv}</entry>
	 <entry>
	  Additional information about this dispatch.
	 </entry>
	</row>
       </tbody>
      </tgroup>
     </informaltable>
     <para>
      Returning an error from <methodname>HandleChannels</methodname> causes
      the Channel Dispatcher to assume the Handler has failed or crashed,
      what happens in this circumstance is left up to the Channel
      Dispatcher. <!-- FIXME: need a lot of clarification here -->
     </para>

     <note id="sect.channel-dispatcher.clients.impl.handler.requests">
      <title>Client.Interface.Requests</title>
      <para>
       Handlers may also implement the optional
       <interfacename>Requests</interfacename> interface. This interface
       allows the Channel Dispatcher to notify a Handler of outgoing requests
       it is likely to be asked to handle
       (i.e. <link linkend="sect.channel.requesting">channels requested via
       the Channel Dispatcher</link>).
       This is <emphasis>not</emphasis> the
       same as being asked to handle the channels, and is only to be used
       for notifying the user (e.g. displaying an "In progress" dialog).
      </para>
      <para>
       There are two methods making up this interface:
       <methodname>AddRequest</methodname> and
       <methodname>RemoveRequest</methodname>.
      </para>
      <para>
       <methodname>AddRequest</methodname> notifies the Handler of a request
       that has been made. It takes two parameters:
      </para>
      <informaltable>
       <tgroup cols="3">
        <thead>
	 <row>
	  <entry>Parameter</entry>
	  <entry>Type</entry>
	  <entry>Description</entry>
	 </row>
	</thead>
	<tbody>
	 <row>
	  <entry>Request</entry>
	  <entry>o</entry>
	  <entry>
	   Path to the <interfacename>ChannelRequest</interfacename> object
	   for this request, provided by the Channel Dispatcher
	   (<literal>org.freedesktop.Telepathy.ChannelDispatcher</literal>).
	  </entry>
	 </row>
	 <row>
	  <entry>Properties</entry>
	  <entry>a{sv}</entry>
	  <entry>
	   The immutable properties of the
	   <interfacename>ChannelRequest</interfacename> object. It includes
	   the <property>Requests</property> property, an array of
	   requested channel property maps.
	  </entry>
	 </row>
	</tbody>
       </tgroup>
      </informaltable>
      <para>
       One of the <parameter>properties</parameter>,
       <property>UserActionTime</property>, can be used for focus stealing
       prevention.
      </para>
      <para>
       <methodname>RemoveRequest</methodname> notifies the Handler that a
       request has been cancelled, or passed off to a different Handler. It
       takes three parameters:
      </para>
      <informaltable>
       <tgroup cols="3">
        <thead>
	 <row>
	  <entry>Parameter</entry>
	  <entry>Type</entry>
	  <entry>Description</entry>
	 </row>
	</thead>
	<tbody>
	 <row>
	  <entry>Request</entry>
	  <entry>o</entry>
	  <entry>
	   Path to the <interfacename>ChannelRequest</interfacename> object
	   for this request, provided by the Channel Dispatcher
	   (<literal>org.freedesktop.Telepathy.ChannelDispatcher</literal>).
	  </entry>
	 </row>
	 <row>
	  <entry>Error</entry>
	  <entry>s</entry>
	  <entry>
	   The name of a D-Bus error saying why the request failed.
	  </entry>
	 </row>
	 <row>
	  <entry>Message</entry>
	  <entry>s</entry>
	  <entry>
	   A more detailed error message.
	  </entry>
	 </row>
	</tbody>
       </tgroup>
      </informaltable>
      <para>
       The error <errorname>org.freedesktop.Telepathy.NotYours</errorname>
       indicates that the request <emphasis>was</emphasis> successful, but
       another Handler was chosen to handle the request.
      </para>
      <para>
       <methodname>RemoveRequest</methodname> is not called if your Handler
       <emphasis>is</emphasis> chosen to handle the request, instead this
       request will be included in the <parameter>Requests
       Satisfied</parameter> parameter in
       <methodname>HandleChannels</methodname>.
      </para>
      <para>
       <interfacename>ChannelRequest</interfacename> objects are documented
       in <xref linkend="sect.channel.requesting.requestobjects"/>.
      </para>
     </note>
    </sect3>

    <sect3 id="sect.channel-dispatcher.clients.impl.tp-glib">
     <title>telepathy-glib and TpBaseClient</title>

     <para>
      telepathy-glib provides a class, <classname>TpBaseClient</classname>,
      that simplifies implementing Telepathy clients by providing the client
      service on the D-Bus.
      <classname>TpBaseClient</classname> is an abstract base class that can
      be inherited to create any mixture of client types. telepathy-glib
      also provides three basic concrete classes, one for each client type:
      <classname>TpSimpleObserver</classname>,
      <classname>TpSimpleApprover</classname> and
      <classname>TpSimpleHandler</classname>.
     </para>

     <para>
      <xref linkend="ex.channel-dispatcher.clients.impl.tpsimplehandler"/>
      provides an example of creating a <classname>TpSimpleHandler</classname>
      to handle file transfer channels.
     </para>

     <example id="ex.channel-dispatcher.clients.impl.tpsimplehandler"
              file="glib_mc5_ft_handler/example.c">
      <title>Creating a TpSimpleHandler</title>
     </example>

     <para>
      The <classname>TpAccount</classname>,
      <classname>TpConnection</classname> and
      <classname>TpChannel</classname> objects passed to the callback are all
      prepared with the <literal>core</literal> feature. You must hold a
      reference to the object to access it outside the callback.
     </para>

     <para>
      Each callback is passed a context object; one of
      <classname>TpObserveChannelsContext</classname>,
      <classname>TpAddDispatchOperationContext</classname>, or
      <classname>TpHandleChannelsContext</classname>; named after the D-Bus
      method that triggers the callback. Each context object provides three
      methods: accept, fail and delay; one of which must be called before
      the end of the callback.
     </para>
     <para>
      The Accept and Fail methods are used to return from the
      <methodname>ObserveChannels</methodname>,
      <methodname>AddDispatchOperation</methodname> and
      <methodname>HandleChannels</methodname> D-Bus methods, either
      successfully or with an error condition.
     </para>
     <para>
      The Delay method is used if you have further
      preparation to carry out before ultimately calling either Accept or
      Fail. This is often used for things that Observers or Approvers need to
      do before the Handler is given the channel, like inspecting the pending
      message queue. You must reference the context object to hold it outside
      the callback.
      <xref linkend="ex.channel-dispatcher.clients.impl.tpsimpleobserver"/>
      shows an example of using the delay method.
     </para>

     <example id="ex.channel-dispatcher.clients.impl.tpsimpleobserver"
              file="glib_mc5_observer/example2.c">
      <title>Delaying Response to the Context Object</title>
     </example>

    </sect3>

   </sect2>

   <sect2 id="sect.channel-dispatcher.clients.clientfile">
    <title>.client File</title>

    <para>
     A <filename>.client</filename> file is used by the Channel Dispatcher to
     pre-lookup properties for D-Bus activatable Telepathy clients.
     Non-activatable clients can also install a client file, but there is
     little point as the Channel Dispatcher can read the properties directly.
    </para>

    <para>
     The file is installed into
     <filename>$XDG_DATA_DIRS/telepathy/clients/clientname.client</filename>
     (e.g.
     <filename>/usr/share/telepathy/clients/gnome-approver.client</filename>)
    </para>

    <para>
     The file contains
     keys for the immutable D-Bus properties the Channel Dispatcher is
     interested in. For instance, an <interfacename>Observer</interfacename>
     would provide the <property>Interfaces</property> and
     <property>ObserverChannelFilter</property> properties. Other properties
     that might appear include <property>ApproverChannelFilter</property>,
     <property>HandlerChannelFilter</property> and
     <property>Capabilities</property>.
    </para>

    <para>
     <xref linkend="ex.channel-dispatcher.clients.clientfile"/> includes
     some <filename>.client</filename> file examples.
    </para>

    <example id="ex.channel-dispatcher.clients.clientfile">
     <title>Example .client File</title>
     <para>
      This example is semantically the same as part 2 of
      <xref linkend="ex.channel-dispatcher.clients.impl.channel_class_list"/>
      above.
     </para>
     <programlisting><![CDATA[[org.freedesktop.Telepathy.Client]
Interfaces=org.freedesktop.Telepathy.Client.Observer;

[org.freedesktop.Telepathy.Client.Observer.ObserverChannelFilter 0]
org.freedesktop.Telepathy.Channel.ChannelType s=org.freedesktop.Telepathy.Channel.Type.Text
org.freedesktop.Telepathy.Channel.TargetHandleType u=1
org.freedesktop.Telepathy.Channel.Requested b=true

[org.freedesktop.Telepathy.Client.Observer.ObserverChannelFilter 1]
org.freedesktop.Telepathy.Channel.ChannelType s=org.freedesktop.Telepathy.Channel.Type.Text
org.freedesktop.Telepathy.Channel.TargetHandleType u=2
org.freedesktop.Telepathy.Channel.Requested b=true]]></programlisting>
<programlisting><![CDATA[[org.freedesktop.Telepathy.Client.Handler.Capabilities]
org.freedesktop.Telepathy.Channel.Interface.MediaSignalling/ice-udp=true
org.freedesktop.Telepathy.Channel.Interface.MediaSignalling/audio/speex=true
org.freedesktop.Telepathy.Channel.Interface.MediaSignalling/video/theora=true
org.freedesktop.Telepathy.Channel.Interface.MediaSignalling/video/h264=true]]></programlisting>
    </example>
   </sect2>
  </sect1>
</chapter>
