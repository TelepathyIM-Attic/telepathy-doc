<?xml version='1.0'?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
               "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY mdash "&#8212;">
]>

<chapter id="chapter.channel-dispatcher">
  <title>Channel Dispatcher and Clients</title>

  <note>
   <para>
    The <interfacename>ChannelDispatcher</interfacename> interface is
    implemented in <application>Mission Control 5</application>.
   </para>
   <para>
    There are no channel dispatching capabilities available in
    <application>Mission Control 4</application>.
   </para>
  </note>

  <para>
   The Channel Dispatcher is responsible for discovering and launching
   Telepathy clients to handle incoming channels from accounts being managed
   by the <link linkend="chapter.accounts">Account Manager</link> and
   channels requested via the Channel Dispatcher (but not channels requested
   directly from a <interfacename>Connection</interfacename>, see
   <xref linkend="sect.channel.requesting"/>).
  </para>

  <para>
   Clients register a well-known name on the D-Bus session bus in the
   <literal>org.freedesktop.Telepathy.Client</literal> namespace. These are
   then picked up by the Channel Dispatcher which queries the appropriate
   properties to discover what manner of client it is.
   Clients may be launched via D-Bus activation if desired. A
   <filename>.client</filename> file is used to provide the D-Bus properties
   the Channel Dispatcher queries, allowing the Channel Dispatcher to only
   activate the client if required.
  </para>

  <para>
   The Channel Dispatcher is available via the well-known D-Bus name
   <literal>org.freedesktop.Telepathy.ChannelDispatcher</literal>, which
   publishes an object
   <literal>/org/freedesktop/Telepathy/ChannelDispatcher</literal>.
  </para>

  <tip>
   <title>Binding Constants</title>
   <para>
    These names and paths are available in the API bindings as named constants.
   </para>
   <informaltable>
    <tgroup cols="2">
     <colspec colname="item"/>
     <colspec colname="const"/>
     <tbody>
      <row>
       <entry namest="item" nameend="const" align="center">
        telepathy-glib
       </entry>
      </row>
      <row>
       <entry>Bus Name</entry>
       <entry>TP_CHANNEL_DISPATCHER_BUS_NAME</entry>
      </row>
      <row>
       <entry>Object Path</entry>
       <entry>TP_CHANNEL_DISPATCHER_OBJECT_PATH</entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </tip>

  <para>
   The Channel Dispatcher watches the
   <link linkend="chapter.connection">Connections</link> known to the
   <link linkend="chapter.accounts">Account Manager</link> and keeps track of
   what <link linkend="sect.channel-dispatcher.clients">Clients</link> are
   available to handle incoming and requested Channels from those Connections.
   When a new
   channel comes in, the Channel Dispatcher looks at the available clients, and
   the types of channels they handle and then selects clients to dispatch the
   channel to.
  </para>

  <para>
   There are three types of Telepathy Clients: Observers, Approvers and
   Handlers. These are described further in
   <xref linkend="sect.channel-dispatcher.clients"/>.
  </para>

  <para>
   The Channel Dispatcher will dispatch a channel to all running or
   activatable Observers and Approvers with a channel filter that matches
   the incoming channel. The Channel Dispatcher provides the Approver with a
   list of suitable Handlers, from which the Approver may make a choice.
  </para>

  <para>
   The Channel Dispatcher may also support error recovery in the case of
   broken or buggy clients. If a client crashes or generates an error when
   asked to handle the channel, the Dispatcher may attempt to use a
   different client instead.
  </para>

  <sect1 id="sect.channel-dispatcher.clients">
   <title>Telepathy Clients</title>

   <para>
    Telepathy Clients are applications that interact with Telepathy services
    to provide some service to the user. It could be a chat client, a VoIP
    client, a file transfer client, a Telepathy Tubes enabled application,
    or something else or maybe even some combination of these.
   </para>

   <para>
    Just like Telepathy Connection Managers, the Account Manager and the
    Channel Dispatcher, Telepathy Clients implement a D-Bus API that is
    used by the Channel Dispatcher to dispatch incoming channels to the
    client.
   </para>

   <figure id="fig.channel-dispatcher.clients.components">
    <title>Telepathy Components</title>
    <mediaobject><imageobject>
     <imagedata fileref="figures/telepathy-components.png"
                format="PNG" />
    </imageobject></mediaobject>
   </figure>

   <para>
    Telepathy Clients appear as D-Bus services registered or activatable on
    a user's session bus. Every running or activatable Telepathy client must
    provide a D-Bus well-known name of the form
    <literal>org.freedesktop.Telepathy.Client.<emphasis>clientname</emphasis></literal>
    (e.g. <literal>org.freedesktop.Telepathy.Client.Empathy</literal>) and
    an object with path of the form
    <literal>/org/freedesktop/Telepathy/Client/<emphasis>clientname</emphasis></literal>
    (e.g. <literal>/org/freedesktop/Telepathy/Client/Empathy</literal>).
   </para>

   <note>
    <title>D-Bus Activation</title>
    <para>
     Telepathy clients can be activated by the Channel Dispatcher using
     D-Bus Activation. This is done in the regular way by registering a
     <filename>.service</filename> file with D-Bus.
    </para>
    <para>
     An additional <filename>.client</filename>
     file is used by the Channel Dispatcher to look up properties such as
     what interfaces the client supports and what channels its interested
     in (see <xref linkend="sect.channel-dispatcher.clients.clientfile"/>
     below).
    </para>
    <para>
     An activatable client can be used by the Dispatcher to handle an
     incoming channel at any time. Examples of clients that might be
     activatable are clients for handling incoming text, VoIP or file
     transfers or Telepathy Tubes.
    </para>
    <para>
     Clients needn't be activatable if you only wish for a client to be
     considered by the Channel Dispatcher while the client is running.
     Applications that you wish to integrate with Telepathy, but do not wish
     to have launched except by the user are in this category. An example
     might be a full-screen media-centre type application.
    </para>
    <para>
     Be aware that <emphasis>all</emphasis> Approvers for a channel are
     dispatched (e.g. if six Approvers match a given incoming channel,
     that channel will be passed to all six clients), so generic Approvers
     (Approvers that aren't associated with a specific application &mdash;
     i.e. Tube applications) should not be activatable by D-Bus activation
     and instead be started by the desktop session.
    </para>
   </note>

   <para>
    There are three types of Telepathy clients:
   </para>
   <itemizedlist>
    <listitem><para><interfacename>Observer</interfacename>s;</para></listitem>
    <listitem><para><interfacename>Approver</interfacename>s; and</para></listitem>
    <listitem><para><interfacename>Handler</interfacename>s.</para></listitem>
   </itemizedlist>

   <para>
    <interfacename>Observer</interfacename>s are used to monitor the creation
    of new channels and the status of those channels.
    <interfacename>Observer</interfacename>s can be used for functions such as
    chat logging, or monitoring file transfer progress.
    <interfacename>Observer</interfacename>s <emphasis>must not</emphasis>
    make method calls that are the role of the
    channel <interfacename>Handler</interfacename> (e.g. acknowledging chat
    messages), but they may change channel state as the result of user
    interaction (e.g. an <interfacename>Observer</interfacename> may
    offer the user a <guibutton>Cancel</guibutton> button to terminate a
    file transfer).
   </para>

   <para>
    <interfacename>Approver</interfacename>s serve to notify users of new
    channels and allow the user to accept or reject the channel. The
    <interfacename>Approver</interfacename> is also able to choose the
    preferred <interfacename>Handler</interfacename> for a channel from a
    list of possible <interfacename>Handler</interfacename>s (which
    it might choose to offer to the user or select based on some other
    criteria).
   </para>

   <para>
    <interfacename>Handler</interfacename>s do the heavy lifting to handle a
    channel. A <interfacename>Handler</interfacename> might be a
    text-chat or video-chat window, or a handler to receive a file or an
    application that uses Tubes for collaboration. Ultimately all
    interaction with a channel is done in the
    <interfacename>Handler</interfacename>, for instance
    acknowledging text messages.
   </para>

   <note>
    <title>Approvers vs Handlers</title>
    <para>
     It is the <interfacename>Approver</interfacename>'s job to accept the
     channel, but it should not call methods on the channel, that is the
     responsibility of the <interfacename>Handler</interfacename>.
    </para>
    <para>
     Take, for example, a file transfer channel. The
     <interfacename>Approver</interfacename> is tasked with asking the user
     to accept the incoming file transfer, providing the details about the
     incoming file; but the action of calling
     <methodname>AcceptFile</methodname> is the responsibility of the
     <interfacename>Handler</interfacename>.
    </para>
    <para>
     In some instances, the <interfacename>Approver</interfacename> and the
     <interfacename>Handler</interfacename> will be the same client
     implementing both interfaces. In other instances there will be a common
     <interfacename>Approver</interfacename> provided by the desktop.
    </para>
   </note>

   <sect2 id="sect.channel-dispatcher.clients.impl">
    <title>Implementing a Telepathy Client</title>

    <para>
     Telepathy clients are services that implement a D-Bus API which is
     called by the Channel Dispatcher (just as the client itself makes
     method calls to the Account Manager and Connection Managers).
    </para>

    <para>
     All Telepathy clients must implement the
     <interfacename>org.freedesktop.Telepathy.Client</interfacename>
     interface plus (at least) one of
     <interfacename>org.freedesktop.Telepathy.Client.Observer</interfacename>,
     <interfacename>org.freedesktop.Telepathy.Client.Approver</interfacename>
     or
     <interfacename>org.freedesktop.Telepathy.Client.Handler</interfacename>.
    </para>

    <para>
     The various Telepathy binding APIs provide straightforward procedures
     for implementing a Telepathy service (such as a Client). These methods
     are documented in <xref linkend="chapter.services"/>.
    </para>

   </sect2>

   <sect2 id="sect.channel-dispatcher.clients.clientfile">
    <title>.client File</title>

    <para>
     A .client file is used by the Channel Dispatcher to pre-lookup
     properties for D-Bus activatable Telepathy clients. Non-activatable
     clients can also install a client file, but there is little point as
     the Channel Dispatcher can read the properties directly.
    </para>

    <para>
     The file is installed into
     <filename>$XDG_DATA_DIRS/telepathy/clients/clientname.client</filename>
     (e.g.
     <filename>/usr/share/telepathy/clients/gnome-approver.client</filename>)
    </para>

    <para>
     The file contains
     keys for the immutable D-Bus properties the Channel Dispatcher is
     interested in. For instance, an <interfacename>Observer</interfacename>
     would provide the <property>Interfaces</property> and
     <property>ObserverChannelFilter</property> properties.
    </para>

    <example id="ex.channel-dispatcher.clients.clientfile">
     <title>Example .client File</title>
     <programlisting><![CDATA[[org.freedesktop.Telepathy.Client]
Interfaces=org.freedesktop.Telepathy.Client.Observer;

[org.freedesktop.Telepathy.Client.Observer.ObserverChannelFilter 0]
org.freedesktop.Telepathy.Channel.Type s=org.freedesktop.Telepathy.Channel.Type.Text
org.freedesktop.Telepathy.Channel.TargetHandleType u=1
org.freedesktop.Telepathy.Channel.Requested b=true

[org.freedesktop.Telepathy.Client.Observer.ObserverChannelFilter 1]
org.freedesktop.Telepathy.Channel.Type s=org.freedesktop.Telepathy.Channel.Type.Text
org.freedesktop.Telepathy.Channel.TargetHandleType u=2
org.freedesktop.Telepathy.Channel.Requested b=true]]></programlisting>
    </example>
   </sect2>
  </sect1>
</chapter>
