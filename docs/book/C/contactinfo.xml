<?xml version='1.0'?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
               "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY mdash "&#8212;">
]>

<chapter id="chapter.contactinfo">
 <title>Accessing and Managing Contact Information</title>

 <para>
  Managing contact information, commonly known as the &quot;roster&quot;,
  is a big part most clients. This includes handling things like a contact's
  real name, presence and status, avatar and client capabilities.
 </para>

 <para>
  A list of handles usually comes from a channel with the
  <link linkend="sect.channel.groups">Group</link> interface (i.e. a chatroom
  or a <link linkend="sect.channel.contactlist">contact list</link>).
 </para>

 <para>
  In general, a client will connect the relevant signals to receive updates
  for presence, aliases, avatars, capabilities, and so on; and then use
  the <link linkend="sect.contactinfo.contacts">Contacts</link> interface to
  bulk request the intial state.
 </para>

 <sect1 id="sect.contactinfo.contacts">
  <title>Contacts</title>
  <para>
   It is often the case that a Telepathy client will want to learn as much
   information about a list of contacts as it can, e.g. their alias, avatar,
   presence, capabilities, location. Requesting data from each of the
   interfaces individually results in n D-Bus method calls on the
   connection. The <interfacename>Contacts</interfacename> interface
   acts as a sort of proxy to the other interfaces of the connection,
   allowing the client to request the most common information in a single
   D-Bus method call (thus saving on D-Bus roundtrips).
  </para>

  <para>
   Depending on a connection's capabilities, it may not implement the full
   set of available interfaces (e.g. IRC provides no avatars). Thus the
   interfaces available for use with the
   <interfacename>Contacts</interfacename> interface are available through
   the <property>ContactAttributeInterfaces</property> property.
  </para>

  <para>
   The lookup is done using the
   <methodname>GetContactAttributes</methodname> method, which takes an
   array of contact handles (e.g. from a contact list), an array of
   interfaces you re interested in (from the
   <property>ContactAttributeInterfaces</property>) and whether or not
   to hold the handles (as if <methodname>HoldHandles</methodname> was
   called). The return value is a nested mapping of handles to mapped
   key/value pairs. <xref linkend="ex.connection.contacts.return"/> gives
   an example return.
  </para>

  <para>
   The keys are of the form
   <literal>interface/attribute</literal> (e.g.
   <literal>org.freedesktop.Telepathy.Connection/contact-id</literal>).
   They do not map to interface properties. For the moment they are
   documented in the spec with the <interfacename>Contacts</interfacename>
   interface.
  </para>

  <example id="ex.connection.contacts.return">
   <title>Example Return Value for GetContactAttributes</title>
   <para>
    <methodname>GetContactAttributes</methodname> was called on a list of
    handles with the <interfacename>Connection</interfacename>,
    <interfacename>Aliasing</interfacename> and
    <interfacename>SimplePresence</interfacename> interfaces.
   </para>

   <informaltable>
    <tgroup cols="3">
     <tbody>
      <row>
       <entry morerows="2">&lt;handle 1&gt;</entry>
       <entry>org.freedesktop.Telepathy.Connection/contact-id</entry>
       <entry>friend1@jabber.org</entry>
      </row>
      <row>
       <entry>org.freedesktop.Telepathy.Connection.Interface.Aliasing/alias</entry>
       <entry>Gary</entry>
      </row>
      <row>
       <entry>org.freedesktop.Telepathy.Connection.Interface.SimplePresence/presence</entry>
       <entry>Presence...</entry>
      </row>
      
      <row>
       <entry morerows="2">&lt;handle 2&gt;</entry>
       <entry>org.freedesktop.Telepathy.Connection/contact-id</entry>
       <entry>friend2@jabber.org</entry>
      </row>
      <row>
       <entry>org.freedesktop.Telepathy.Connection.Interface.Aliasing/alias</entry>
       <entry>Stephanie</entry>
      </row>
      <row>
       <entry>org.freedesktop.Telepathy.Connection.Interface.SimplePresence/presence</entry>
       <entry>Presence...</entry>
      </row>
      
      <row>
       <entry morerows="2">&lt;handle 3&gt;</entry>
       <entry>org.freedesktop.Telepathy.Connection/contact-id</entry>
       <entry>friend3@jabber.org</entry>
      </row>
      <row>
       <entry>org.freedesktop.Telepathy.Connection.Interface.Aliasing/alias</entry>
       <entry>Danielle</entry>
      </row>
      <row>
       <entry>org.freedesktop.Telepathy.Connection.Interface.SimplePresence/presence</entry>
       <entry>Presence...</entry>
      </row>

     </tbody>
    </tgroup>
   </informaltable>
  </example>

  <sect2 id="sect.contactinfo.contacts.receiving-updates">
   <title>Receiving Updates</title>
   <para>
    While <interfacename>Contacts</interfacename>/<methodname>GetContactAttributes</methodname>
    allows us to
    bulk-request lots of information about a contact. It does not provide a
    mechanism to receive signals to notify the client of changes to a contact
    (e.g., their alias, avatar, location, status, etc.).
    Instead the client should connect to the various signals provided by
    the interfaces its interested in.
   </para>
  </sect2>

  <sect2 id="sect.contactinfo.contacts.glib">
   <title>telepathy-glib &mdash; TpContact</title>

   <para>
    <application>telepathy-glib</application> provides an class specifically
    for managing information relating to a contact,
    <classname>TpContact</classname>.
   </para>

   <para>
    A collection of <classname>TpContact</classname> instances can be
    created by calling
    <function>tp_connection_get_contacts_by_handle</function> (or
    <function>tp_connection_get_contacts_by_id</function>).
    <application>telepathy-glib</application> takes care of tracking
    <classname>TpContact</classname> objects, so requesting the same contact
    multiple times is safe and results in the same object being returned
    while the object exists.
   </para>

   <para>
    A <classname>TpChannel</classname> that implements
    <interfacename>Group</interfacename> provides API for requesting the list
    of handles associated with the channel:
    <function>tp_channel_group_get_members</function>,
    <function>tp_channel_group_get_local_pending</function> and
    <function>tp_channel_group_get_remote_pending</function>
    (see <xref linkend="sect.channel.groups.glib"/>). These
    functions all return a set of handles as a <classname>TpIntSet</classname>
    that can be turned into <classname>TpContact</classname> objects.
    <xref linkend="ex.sect.contactinfo.contacts.glib.members"/> shows how to
    request a set of <classname>TpContact</classname> objects from a
    channel.
   </para>

   <para>
    Unlike in the D-Bus API, the provided list of features does not need
    to be checked against available features for the connection.
    <application>telepathy-glib</application> handles this for us. Thus, the
    list of features should only be the list of features that the client
    supports.
   </para>

   <example id="ex.sect.contactinfo.contacts.glib.members"
            file="glib_get_roster/example.c">
    <title>Requesting TpContact objects from tp_channel_group_get_members()</title>
   </example>

   <para>
    <classname>TpContact</classname> objects will be unreferenced when the
    callback is finished, thus
    to hold on to a <classname>TpContact</classname> you must reference it
    (i.e. using <function>g_object_ref</function> or using it in a way that
    implicitly references &mdash; e.g. adding it to a
    <classname>GtkListStore</classname>).
    <xref linkend="ex.sect.contactinfo.contacts.glib.tpcontact"/> shows
    the callback from creating a set of <classname>TpContact</classname>s.
   </para>

   <para>
    The contact's parameters (alias, presence, avatar, etc.) are exposed on
    <classname>TpContact</classname> as GObject properties. Thus for a
    referenced object, we can connect the <methodname>notify</methodname>
    signal to track updates to these properties.
    <application>telepathy-glib</application> takes care of all of the
    underlying work in Telepathy, so your application doesn't need to
    connect any of the Telepathy signals.
   </para>
   
   <example id="ex.sect.contactinfo.contacts.glib.tpcontact"
            file="glib_get_roster/example.c">
    <title>Handling a Set of Newly Created Contacts</title>
   </example>

   <tip>
    <title>Handling Your Contact Roster</title>
    <para>
     To handle the contact roster for your application, keep the list of
     <classname>TpContact</classname> objects in a data structure
     appropriate for displaying in your user interface (e.g.
     <classname>GtkListStore</classname>). Connect the
     <methodname>notify</methodname> signal to track updates to contact
     information (e.g. presence, alias, avatar).
    </para>
    <para>
     If possible, provide a sort function for your view using
     <function>tp_connection_presence_type_cmp_availability</function> to
     sort contacts by their availability.
    </para>
    <para>
     In GTK+, useful functions are
     <function>gtk_tree_view_column_set_cell_data_func</function> or
     <function>gtk_cell_layout_set_cell_data_func</function> to pull data
     from the model for display in the view; and
     <function>gtk_tree_sortable_set_default_sort_func</function> to sort
     the view by availability (don't forget
     <code><function>gtk_tree_sortable_set_sort_column_id</function> (model,
     GTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID, GTK_SORT_ASCENDING);</code>).
    </para>
   </tip>

  </sect2>

 </sect1>

 <sect1 id="sect.contactinfo.presence">
  <title>Presence</title>
  <para>
   If a protocol has the concept of presence, showing when users are
   online or available, then its <interfacename>Connection</interfacename>
   will provide the <interfacename>SimplePresence</interfacename> interface.
   This interface provides functions to set and get the user's current
   presence as well as the presence of other accounts (usually the accounts
   on the user's roster).
  </para>

  <para>
   Setting the user's own presence is documented in
   <xref linkend="sect.connection.presence"/>.
  </para>

  <warning>
   <title>Presence vs. SimplePresence</title>
   <para>
    The Telepathy API specification also specifies another presence interface
    <interfacename>Presence</interfacename>. This interface was deemed too
    complex and has summarily been deprecated. Telepathy clients should
    not use <interfacename>Presence</interfacename> and instead use
    <interfacename>SimplePresence</interfacename>.
   </para>
  </warning>

  <tip>
   <para>
    Many of the common requests that are made when a Telepathy client
    starts up (e.g. aliases, avatars, presence) can be batched together
    in a call to <methodname>Contacts.GetContactAttributes</methodname>.
   </para>
   <para>
    See <xref linkend="sect.contactinfo.contacts"/> for more information.
   </para>
  </tip>

  <para>
   The presence for a list of contact handles can be retrieved with the
   <methodname>GetPresences</methodname> method call. This method call
   takes an array of handles of type <type>Handle_Type_Contact</type>
   and returns a map of those handles to <type>Simple_Presence</type>
   structs.
  </para>

  <para>
   Presence updates can be tracked by connecting the
   <methodname>PresencesChanged</methodname> signal.
  </para>
 </sect1>

</chapter>
